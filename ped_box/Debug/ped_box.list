
ped_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800680c  0800680c  0000780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b0  080068b0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b8  080068b8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b8  080068b8  000078b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000068  08006928  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08006928  0000833c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e16  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b81  00000000  00000000  0001ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0001fa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd5  00000000  00000000  00020b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bce  00000000  00000000  000217e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bad  00000000  00000000  000433b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da311  00000000  00000000  00058f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec4  00000000  00000000  001332b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00138178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080067f4 	.word	0x080067f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080067f4 	.word	0x080067f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96a 	b.w	8000924 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	460c      	mov	r4, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d14e      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000674:	4694      	mov	ip, r2
 8000676:	458c      	cmp	ip, r1
 8000678:	4686      	mov	lr, r0
 800067a:	fab2 f282 	clz	r2, r2
 800067e:	d962      	bls.n	8000746 <__udivmoddi4+0xde>
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	4091      	lsls	r1, r2
 8000688:	fa20 f303 	lsr.w	r3, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	4319      	orrs	r1, r3
 8000692:	fa00 fe02 	lsl.w	lr, r0, r2
 8000696:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800069a:	fa1f f68c 	uxth.w	r6, ip
 800069e:	fbb1 f4f7 	udiv	r4, r1, r7
 80006a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006a6:	fb07 1114 	mls	r1, r7, r4, r1
 80006aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ae:	fb04 f106 	mul.w	r1, r4, r6
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80006be:	f080 8112 	bcs.w	80008e6 <__udivmoddi4+0x27e>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 810f 	bls.w	80008e6 <__udivmoddi4+0x27e>
 80006c8:	3c02      	subs	r4, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a59      	subs	r1, r3, r1
 80006ce:	fa1f f38e 	uxth.w	r3, lr
 80006d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006d6:	fb07 1110 	mls	r1, r7, r0, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb00 f606 	mul.w	r6, r0, r6
 80006e2:	429e      	cmp	r6, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ee:	f080 80fc 	bcs.w	80008ea <__udivmoddi4+0x282>
 80006f2:	429e      	cmp	r6, r3
 80006f4:	f240 80f9 	bls.w	80008ea <__udivmoddi4+0x282>
 80006f8:	4463      	add	r3, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000702:	2100      	movs	r1, #0
 8000704:	b11d      	cbz	r5, 800070e <__udivmoddi4+0xa6>
 8000706:	40d3      	lsrs	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	e9c5 3200 	strd	r3, r2, [r5]
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d905      	bls.n	8000722 <__udivmoddi4+0xba>
 8000716:	b10d      	cbz	r5, 800071c <__udivmoddi4+0xb4>
 8000718:	e9c5 0100 	strd	r0, r1, [r5]
 800071c:	2100      	movs	r1, #0
 800071e:	4608      	mov	r0, r1
 8000720:	e7f5      	b.n	800070e <__udivmoddi4+0xa6>
 8000722:	fab3 f183 	clz	r1, r3
 8000726:	2900      	cmp	r1, #0
 8000728:	d146      	bne.n	80007b8 <__udivmoddi4+0x150>
 800072a:	42a3      	cmp	r3, r4
 800072c:	d302      	bcc.n	8000734 <__udivmoddi4+0xcc>
 800072e:	4290      	cmp	r0, r2
 8000730:	f0c0 80f0 	bcc.w	8000914 <__udivmoddi4+0x2ac>
 8000734:	1a86      	subs	r6, r0, r2
 8000736:	eb64 0303 	sbc.w	r3, r4, r3
 800073a:	2001      	movs	r0, #1
 800073c:	2d00      	cmp	r5, #0
 800073e:	d0e6      	beq.n	800070e <__udivmoddi4+0xa6>
 8000740:	e9c5 6300 	strd	r6, r3, [r5]
 8000744:	e7e3      	b.n	800070e <__udivmoddi4+0xa6>
 8000746:	2a00      	cmp	r2, #0
 8000748:	f040 8090 	bne.w	800086c <__udivmoddi4+0x204>
 800074c:	eba1 040c 	sub.w	r4, r1, ip
 8000750:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000754:	fa1f f78c 	uxth.w	r7, ip
 8000758:	2101      	movs	r1, #1
 800075a:	fbb4 f6f8 	udiv	r6, r4, r8
 800075e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000762:	fb08 4416 	mls	r4, r8, r6, r4
 8000766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800076a:	fb07 f006 	mul.w	r0, r7, r6
 800076e:	4298      	cmp	r0, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x11c>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f106 34ff 	add.w	r4, r6, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x11a>
 800077c:	4298      	cmp	r0, r3
 800077e:	f200 80cd 	bhi.w	800091c <__udivmoddi4+0x2b4>
 8000782:	4626      	mov	r6, r4
 8000784:	1a1c      	subs	r4, r3, r0
 8000786:	fa1f f38e 	uxth.w	r3, lr
 800078a:	fbb4 f0f8 	udiv	r0, r4, r8
 800078e:	fb08 4410 	mls	r4, r8, r0, r4
 8000792:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000796:	fb00 f707 	mul.w	r7, r0, r7
 800079a:	429f      	cmp	r7, r3
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x148>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x146>
 80007a8:	429f      	cmp	r7, r3
 80007aa:	f200 80b0 	bhi.w	800090e <__udivmoddi4+0x2a6>
 80007ae:	4620      	mov	r0, r4
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b6:	e7a5      	b.n	8000704 <__udivmoddi4+0x9c>
 80007b8:	f1c1 0620 	rsb	r6, r1, #32
 80007bc:	408b      	lsls	r3, r1
 80007be:	fa22 f706 	lsr.w	r7, r2, r6
 80007c2:	431f      	orrs	r7, r3
 80007c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c8:	fa04 f301 	lsl.w	r3, r4, r1
 80007cc:	ea43 030c 	orr.w	r3, r3, ip
 80007d0:	40f4      	lsrs	r4, r6
 80007d2:	fa00 f801 	lsl.w	r8, r0, r1
 80007d6:	0c38      	lsrs	r0, r7, #16
 80007d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007dc:	fbb4 fef0 	udiv	lr, r4, r0
 80007e0:	fa1f fc87 	uxth.w	ip, r7
 80007e4:	fb00 441e 	mls	r4, r0, lr, r4
 80007e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ec:	fb0e f90c 	mul.w	r9, lr, ip
 80007f0:	45a1      	cmp	r9, r4
 80007f2:	fa02 f201 	lsl.w	r2, r2, r1
 80007f6:	d90a      	bls.n	800080e <__udivmoddi4+0x1a6>
 80007f8:	193c      	adds	r4, r7, r4
 80007fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007fe:	f080 8084 	bcs.w	800090a <__udivmoddi4+0x2a2>
 8000802:	45a1      	cmp	r9, r4
 8000804:	f240 8081 	bls.w	800090a <__udivmoddi4+0x2a2>
 8000808:	f1ae 0e02 	sub.w	lr, lr, #2
 800080c:	443c      	add	r4, r7
 800080e:	eba4 0409 	sub.w	r4, r4, r9
 8000812:	fa1f f983 	uxth.w	r9, r3
 8000816:	fbb4 f3f0 	udiv	r3, r4, r0
 800081a:	fb00 4413 	mls	r4, r0, r3, r4
 800081e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000822:	fb03 fc0c 	mul.w	ip, r3, ip
 8000826:	45a4      	cmp	ip, r4
 8000828:	d907      	bls.n	800083a <__udivmoddi4+0x1d2>
 800082a:	193c      	adds	r4, r7, r4
 800082c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000830:	d267      	bcs.n	8000902 <__udivmoddi4+0x29a>
 8000832:	45a4      	cmp	ip, r4
 8000834:	d965      	bls.n	8000902 <__udivmoddi4+0x29a>
 8000836:	3b02      	subs	r3, #2
 8000838:	443c      	add	r4, r7
 800083a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800083e:	fba0 9302 	umull	r9, r3, r0, r2
 8000842:	eba4 040c 	sub.w	r4, r4, ip
 8000846:	429c      	cmp	r4, r3
 8000848:	46ce      	mov	lr, r9
 800084a:	469c      	mov	ip, r3
 800084c:	d351      	bcc.n	80008f2 <__udivmoddi4+0x28a>
 800084e:	d04e      	beq.n	80008ee <__udivmoddi4+0x286>
 8000850:	b155      	cbz	r5, 8000868 <__udivmoddi4+0x200>
 8000852:	ebb8 030e 	subs.w	r3, r8, lr
 8000856:	eb64 040c 	sbc.w	r4, r4, ip
 800085a:	fa04 f606 	lsl.w	r6, r4, r6
 800085e:	40cb      	lsrs	r3, r1
 8000860:	431e      	orrs	r6, r3
 8000862:	40cc      	lsrs	r4, r1
 8000864:	e9c5 6400 	strd	r6, r4, [r5]
 8000868:	2100      	movs	r1, #0
 800086a:	e750      	b.n	800070e <__udivmoddi4+0xa6>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f103 	lsr.w	r1, r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa24 f303 	lsr.w	r3, r4, r3
 800087c:	4094      	lsls	r4, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000884:	fa00 fe02 	lsl.w	lr, r0, r2
 8000888:	fa1f f78c 	uxth.w	r7, ip
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3110 	mls	r1, r8, r0, r3
 8000894:	0c23      	lsrs	r3, r4, #16
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb00 f107 	mul.w	r1, r0, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x24c>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008aa:	d22c      	bcs.n	8000906 <__udivmoddi4+0x29e>
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d92a      	bls.n	8000906 <__udivmoddi4+0x29e>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008bc:	fb08 3311 	mls	r3, r8, r1, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb01 f307 	mul.w	r3, r1, r7
 80008c8:	42a3      	cmp	r3, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x276>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008d4:	d213      	bcs.n	80008fe <__udivmoddi4+0x296>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d911      	bls.n	80008fe <__udivmoddi4+0x296>
 80008da:	3902      	subs	r1, #2
 80008dc:	4464      	add	r4, ip
 80008de:	1ae4      	subs	r4, r4, r3
 80008e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008e4:	e739      	b.n	800075a <__udivmoddi4+0xf2>
 80008e6:	4604      	mov	r4, r0
 80008e8:	e6f0      	b.n	80006cc <__udivmoddi4+0x64>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e706      	b.n	80006fc <__udivmoddi4+0x94>
 80008ee:	45c8      	cmp	r8, r9
 80008f0:	d2ae      	bcs.n	8000850 <__udivmoddi4+0x1e8>
 80008f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008fa:	3801      	subs	r0, #1
 80008fc:	e7a8      	b.n	8000850 <__udivmoddi4+0x1e8>
 80008fe:	4631      	mov	r1, r6
 8000900:	e7ed      	b.n	80008de <__udivmoddi4+0x276>
 8000902:	4603      	mov	r3, r0
 8000904:	e799      	b.n	800083a <__udivmoddi4+0x1d2>
 8000906:	4630      	mov	r0, r6
 8000908:	e7d4      	b.n	80008b4 <__udivmoddi4+0x24c>
 800090a:	46d6      	mov	lr, sl
 800090c:	e77f      	b.n	800080e <__udivmoddi4+0x1a6>
 800090e:	4463      	add	r3, ip
 8000910:	3802      	subs	r0, #2
 8000912:	e74d      	b.n	80007b0 <__udivmoddi4+0x148>
 8000914:	4606      	mov	r6, r0
 8000916:	4623      	mov	r3, r4
 8000918:	4608      	mov	r0, r1
 800091a:	e70f      	b.n	800073c <__udivmoddi4+0xd4>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	e730      	b.n	8000784 <__udivmoddi4+0x11c>
 8000922:	bf00      	nop

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	@ 0x30
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800092e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f005 f93e 	bl	8005bc2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000948:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800094c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800094e:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000950:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000956:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000970:	2204      	movs	r2, #4
 8000972:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 800097c:	2201      	movs	r2, #1
 800097e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000982:	2201      	movs	r2, #1
 8000984:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b0:	4817      	ldr	r0, [pc, #92]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 80009b2:	f001 f82b 	bl	8001a0c <HAL_ADC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009bc:	f000 fb4c 	bl	8001058 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 80009cc:	f002 f9d0 	bl	8002d70 <HAL_ADCEx_MultiModeConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009d6:	f000 fb3f 	bl	8001058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_ADC1_Init+0xec>)
 80009dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009de:	2306      	movs	r3, #6
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009e6:	237f      	movs	r3, #127	@ 0x7f
 80009e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ea:	2304      	movs	r3, #4
 80009ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_ADC1_Init+0xe8>)
 80009f8:	f001 fbb6 	bl	8002168 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a02:	f000 fb29 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000084 	.word	0x20000084
 8000a14:	21800100 	.word	0x21800100

08000a18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09e      	sub	sp, #120	@ 0x78
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2250      	movs	r2, #80	@ 0x50
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 f8c2 	bl	8005bc2 <memset>
  if(adcHandle->Instance==ADC1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a46:	d133      	bne.n	8000ab0 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a4e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a52:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 fe63 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a64:	f000 faf8 	bl	8001058 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <HAL_ADC_MspInit+0xa0>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <HAL_ADC_MspInit+0xa0>)
 8000a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a74:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <HAL_ADC_MspInit+0xa0>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_ADC_MspInit+0xa0>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <HAL_ADC_MspInit+0xa0>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_ADC_MspInit+0xa0>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <HAL_ADC_MspInit+0xa4>)
 8000aac:	f002 fed6 	bl	800385c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3778      	adds	r7, #120	@ 0x78
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000800 	.word	0x48000800

08000ac0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000ac6:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <MX_FDCAN1_Init+0x88>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000afc:	220d      	movs	r2, #13
 8000afe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_FDCAN1_Init+0x84>)
 8000b32:	f002 fb15 	bl	8003160 <HAL_FDCAN_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000b3c:	f000 fa8c 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	40006400 	.word	0x40006400

08000b4c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09e      	sub	sp, #120	@ 0x78
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2250      	movs	r2, #80	@ 0x50
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f005 f828 	bl	8005bc2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a28      	ldr	r2, [pc, #160]	@ (8000c18 <HAL_FDCAN_MspInit+0xcc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d149      	bne.n	8000c10 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b80:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b86:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fdc9 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b98:	f000 fa5e 	bl	8001058 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <HAL_FDCAN_MspInit+0xd0>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <HAL_FDCAN_MspInit+0xd0>)
 8000ba2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_FDCAN_MspInit+0xd0>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_FDCAN_MspInit+0xd0>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb8:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <HAL_FDCAN_MspInit+0xd0>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_FDCAN_MspInit+0xd0>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bcc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bde:	2309      	movs	r3, #9
 8000be0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f002 fe36 	bl	800385c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2015      	movs	r0, #21
 8000bf6:	f002 fa7e 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000bfa:	2015      	movs	r0, #21
 8000bfc:	f002 fa95 	bl	800312a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2016      	movs	r0, #22
 8000c06:	f002 fa76 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c0a:	2016      	movs	r0, #22
 8000c0c:	f002 fa8d 	bl	800312a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	3778      	adds	r7, #120	@ 0x78
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40006400 	.word	0x40006400
 8000c1c:	40021000 	.word	0x40021000

08000c20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b4c      	ldr	r3, [pc, #304]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c42:	4b49      	ldr	r3, [pc, #292]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	4b46      	ldr	r3, [pc, #280]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a45      	ldr	r2, [pc, #276]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b43      	ldr	r3, [pc, #268]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4b40      	ldr	r3, [pc, #256]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b3d      	ldr	r3, [pc, #244]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a39      	ldr	r2, [pc, #228]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b34      	ldr	r3, [pc, #208]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4a33      	ldr	r2, [pc, #204]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <MX_GPIO_Init+0x148>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000cc6:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8000cca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4824      	ldr	r0, [pc, #144]	@ (8000d6c <MX_GPIO_Init+0x14c>)
 8000cdc:	f002 fdbe 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481f      	ldr	r0, [pc, #124]	@ (8000d70 <MX_GPIO_Init+0x150>)
 8000cf4:	f002 fdb2 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4819      	ldr	r0, [pc, #100]	@ (8000d74 <MX_GPIO_Init+0x154>)
 8000d0e:	f002 fda5 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000d12:	f24e 73f3 	movw	r3, #59379	@ 0xe7f3
 8000d16:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f002 fd97 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d32:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <MX_GPIO_Init+0x158>)
 8000d44:	f002 fd8a 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <MX_GPIO_Init+0x15c>)
 8000d5c:	f002 fd7e 	bl	800385c <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	@ 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	48001400 	.word	0x48001400
 8000d74:	48001800 	.word	0x48001800
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48000c00 	.word	0x48000c00

08000d80 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);  // Send character via LPUART1
 8000d88:	1d39      	adds	r1, r7, #4
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <__io_putchar+0x20>)
 8000d92:	f003 ff53 	bl	8004c3c <HAL_UART_Transmit>
    return ch;  // Return the character (required by the standard)
 8000d96:	687b      	ldr	r3, [r7, #4]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000158 	.word	0x20000158

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b096      	sub	sp, #88	@ 0x58
 8000da8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f000 fb44 	bl	8001436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f913 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f7ff ff35 	bl	8000c20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000db6:	f7ff fdb7 	bl	8000928 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000dba:	f7ff fe81 	bl	8000ac0 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8000dbe:	f000 fa6f 	bl	80012a0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Need to modify MX_ADC1_Init function to accomodate two channels

  // Configure GPIO pins for ADC1_IN8 (PC2) and ADC1_IN9 (PC3)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b78      	ldr	r3, [pc, #480]	@ (8000fb4 <main+0x210>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a77      	ldr	r2, [pc, #476]	@ (8000fb4 <main+0x210>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b75      	ldr	r3, [pc, #468]	@ (8000fb4 <main+0x210>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  // Configure PC2 (ADC1_IN8) as analog input
  GPIO_InitStruct.Pin = GPIO_PIN_2;  // PC2
 8000dea:	2304      	movs	r3, #4
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	486e      	ldr	r0, [pc, #440]	@ (8000fb8 <main+0x214>)
 8000dfe:	f002 fd2d 	bl	800385c <HAL_GPIO_Init>

  // Configure PC3 (ADC1_IN9) as analog input
  GPIO_InitStruct.Pin = GPIO_PIN_3;  // PC3
 8000e02:	2308      	movs	r3, #8
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e06:	2303      	movs	r3, #3
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	4868      	ldr	r0, [pc, #416]	@ (8000fb8 <main+0x214>)
 8000e16:	f002 fd21 	bl	800385c <HAL_GPIO_Init>

  // FDCAN1 pins configuration for TX and RX
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b66      	ldr	r3, [pc, #408]	@ (8000fb4 <main+0x210>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a65      	ldr	r2, [pc, #404]	@ (8000fb4 <main+0x210>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b63      	ldr	r3, [pc, #396]	@ (8000fb4 <main+0x210>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_12; // FDCAN1_TX Pin
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e40:	2302      	movs	r3, #2
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e44:	2309      	movs	r3, #9
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e52:	f002 fd03 	bl	800385c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11; // FDCAN1_RX Pin
 8000e56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2302      	movs	r3, #2
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e68:	2309      	movs	r3, #9
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e76:	f002 fcf1 	bl	800385c <HAL_GPIO_Init>

  // PA2 (LPUART1_TX)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull mode
 8000e7e:	2302      	movs	r3, #2
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;     // No pull-up or pull-down resistors
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e86:	2302      	movs	r3, #2
 8000e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1; // Alternate function for LPUART1 TX
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f002 fce0 	bl	800385c <HAL_GPIO_Init>

  // PA3 (LPUART1_RX)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull mode
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;     // No pull-up or pull-down resistors
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1; // Alternate function for LPUART1 RX
 8000eac:	2308      	movs	r3, #8
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f002 fccf 	bl	800385c <HAL_GPIO_Init>

  // Start ADC
  HAL_ADC_Start(&hadc1);  // Start the ADC
 8000ebe:	483f      	ldr	r0, [pc, #252]	@ (8000fbc <main+0x218>)
 8000ec0:	f000 ff52 	bl	8001d68 <HAL_ADC_Start>
  HAL_FDCAN_Start(&hfdcan1);  // Start FDCAN1 communication
 8000ec4:	483e      	ldr	r0, [pc, #248]	@ (8000fc0 <main+0x21c>)
 8000ec6:	f002 faa5 	bl	8003414 <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc1);  // Start the ADC
 8000eca:	483c      	ldr	r0, [pc, #240]	@ (8000fbc <main+0x218>)
 8000ecc:	f000 ff4c 	bl	8001d68 <HAL_ADC_Start>
  {
	  // declare variables
	  uint32_t adcValue1;
	  uint32_t adcValue2;
      // Configure and read from ADC1_IN8 (Pot 1)
    if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8000ed0:	493c      	ldr	r1, [pc, #240]	@ (8000fc4 <main+0x220>)
 8000ed2:	483a      	ldr	r0, [pc, #232]	@ (8000fbc <main+0x218>)
 8000ed4:	f001 f846 	bl	8001f64 <HAL_ADC_PollForConversion>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <main+0x142>
    {
            adcValue1 = HAL_ADC_GetValue(&hadc1);
 8000ede:	4837      	ldr	r0, [pc, #220]	@ (8000fbc <main+0x218>)
 8000ee0:	f001 f934 	bl	800214c <HAL_ADC_GetValue>
 8000ee4:	64f8      	str	r0, [r7, #76]	@ 0x4c
    }


            // Stop the ADC and configure it for ADC1_IN9 (Pot 2)
            HAL_ADC_Stop(&hadc1);
 8000ee6:	4835      	ldr	r0, [pc, #212]	@ (8000fbc <main+0x218>)
 8000ee8:	f001 f808 	bl	8001efc <HAL_ADC_Stop>

            ADC_ChannelConfTypeDef sConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2220      	movs	r2, #32
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fe65 	bl	8005bc2 <memset>
            sConfig.Channel = ADC_CHANNEL_9; // ADC1_IN9
 8000ef8:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <main+0x224>)
 8000efa:	607b      	str	r3, [r7, #4]
            sConfig.Rank = ADC_REGULAR_RANK_1;
 8000efc:	2306      	movs	r3, #6
 8000efe:	60bb      	str	r3, [r7, #8]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 8000f00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f04:	60fb      	str	r3, [r7, #12]
            sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f06:	237f      	movs	r3, #127	@ 0x7f
 8000f08:	613b      	str	r3, [r7, #16]
            HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	482b      	ldr	r0, [pc, #172]	@ (8000fbc <main+0x218>)
 8000f10:	f001 f92a 	bl	8002168 <HAL_ADC_ConfigChannel>

            // Start ADC conversion for ADC1_IN9 (Pot 2)
            HAL_ADC_Start(&hadc1);
 8000f14:	4829      	ldr	r0, [pc, #164]	@ (8000fbc <main+0x218>)
 8000f16:	f000 ff27 	bl	8001d68 <HAL_ADC_Start>
            if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8000f1a:	492a      	ldr	r1, [pc, #168]	@ (8000fc4 <main+0x220>)
 8000f1c:	4827      	ldr	r0, [pc, #156]	@ (8000fbc <main+0x218>)
 8000f1e:	f001 f821 	bl	8001f64 <HAL_ADC_PollForConversion>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d108      	bne.n	8000f3a <main+0x196>
            {
            //	uint32_t adcValue2;
                adcValue2 = HAL_ADC_GetValue(&hadc1); // Pot 2 value
 8000f28:	4824      	ldr	r0, [pc, #144]	@ (8000fbc <main+0x218>)
 8000f2a:	f001 f90f 	bl	800214c <HAL_ADC_GetValue>
 8000f2e:	64b8      	str	r0, [r7, #72]	@ 0x48

                // inverting pot 2 value (assuming it's wired backwards)
                adcValue2 = 4095 - adcValue2;
 8000f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f32:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000f36:	330f      	adds	r3, #15
 8000f38:	64bb      	str	r3, [r7, #72]	@ 0x48

            // Convert ADC values to percentage
            float percentage1;
            float percentage2;

            percentage1 = ((float)adcValue1 / 4095) * 100;  // For ADC1_IN8 (PC2)
 8000f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f44:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000fcc <main+0x228>
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000fd0 <main+0x22c>
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            percentage2 = ((float)adcValue2 / 4095) * 100;  // For ADC1_IN9 (PC3)
 8000f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f62:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000fcc <main+0x228>
 8000f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000fd0 <main+0x22c>
 8000f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f72:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40


            // check if percentages are off?
            if((percentage1 >= percentage2 + 5) || (percentage1 <= percentage2 - 5))
 8000f76:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000f7a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f82:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                Error_Handler();  // Handle error if CAN message can't be added to FIFO
            }
	*/

            // output to LPUART -- No clue
            printf("Percentage 1: %.2f%%, Percentage 2: %.2f%%\r\n", percentage1, percentage2);
 8000f8e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000f90:	f7ff fafa 	bl	8000588 <__aeabi_f2d>
 8000f94:	4604      	mov	r4, r0
 8000f96:	460d      	mov	r5, r1
 8000f98:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000f9a:	f7ff faf5 	bl	8000588 <__aeabi_f2d>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	e9cd 2300 	strd	r2, r3, [sp]
 8000fa6:	4622      	mov	r2, r4
 8000fa8:	462b      	mov	r3, r5
 8000faa:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <main+0x230>)
 8000fac:	f004 fdb4 	bl	8005b18 <iprintf>
  {
 8000fb0:	e78e      	b.n	8000ed0 <main+0x12c>
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	20000084 	.word	0x20000084
 8000fc0:	200000f0 	.word	0x200000f0
 8000fc4:	000f4240 	.word	0x000f4240
 8000fc8:	25b00200 	.word	0x25b00200
 8000fcc:	457ff000 	.word	0x457ff000
 8000fd0:	42c80000 	.word	0x42c80000
 8000fd4:	0800680c 	.word	0x0800680c

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2238      	movs	r2, #56	@ 0x38
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fdeb 	bl	8005bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ffe:	f002 fdaf 	bl	8003b60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2340      	movs	r3, #64	@ 0x40
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fe55 	bl	8003cc8 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001024:	f000 f818 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102c:	2301      	movs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 f953 	bl	80042ec <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800104c:	f000 f804 	bl	8001058 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3750      	adds	r7, #80	@ 0x50
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	@ 0x60
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	@ 0x58
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800109a:	f002 fe05 	bl	8003ca8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f9eb 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <FDCAN1_IT0_IRQHandler+0x10>)
 8001112:	f002 f9a7 	bl	8003464 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000f0 	.word	0x200000f0

08001120 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <FDCAN1_IT1_IRQHandler+0x10>)
 8001126:	f002 f99d 	bl	8003464 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000f0 	.word	0x200000f0

08001134 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00a      	b.n	800115c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001146:	f3af 8000 	nop.w
 800114a:	4601      	mov	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf0      	blt.n	8001146 <_read+0x12>
  }

  return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e009      	b.n	8001194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60ba      	str	r2, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fdf9 	bl	8000d80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf1      	blt.n	8001180 <_write+0x12>
  }
  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_close>:

int _close(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ce:	605a      	str	r2, [r3, #4]
  return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f004 fd0e 	bl	8005c60 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2001c000 	.word	0x2001c000
 8001270:	00000400 	.word	0x00000400
 8001274:	20000154 	.word	0x20000154
 8001278:	20000340 	.word	0x20000340

0800127c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012a4:	4b21      	ldr	r3, [pc, #132]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012a6:	4a22      	ldr	r2, [pc, #136]	@ (8001330 <MX_LPUART1_UART_Init+0x90>)
 80012a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012e2:	4812      	ldr	r0, [pc, #72]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012e4:	f003 fc5a 	bl	8004b9c <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ee:	f7ff feb3 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	480d      	ldr	r0, [pc, #52]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012f6:	f004 fa83 	bl	8005800 <HAL_UARTEx_SetTxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001300:	f7ff feaa 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	4809      	ldr	r0, [pc, #36]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 8001308:	f004 fab8 	bl	800587c <HAL_UARTEx_SetRxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001312:	f7ff fea1 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_LPUART1_UART_Init+0x8c>)
 8001318:	f004 fa39 	bl	800578e <HAL_UARTEx_DisableFifoMode>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001322:	f7ff fe99 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000158 	.word	0x20000158
 8001330:	40008000 	.word	0x40008000

08001334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09e      	sub	sp, #120	@ 0x78
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2250      	movs	r2, #80	@ 0x50
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fc34 	bl	8005bc2 <memset>
  if(uartHandle->Instance==LPUART1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1f      	ldr	r2, [pc, #124]	@ (80013dc <HAL_UART_MspInit+0xa8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d136      	bne.n	80013d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001364:	2320      	movs	r3, #32
 8001366:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4618      	mov	r0, r3
 8001372:	f003 f9d7 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800137c:	f7ff fe6c 	bl	8001058 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_UART_MspInit+0xac>)
 8001382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001384:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <HAL_UART_MspInit+0xac>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_UART_MspInit+0xac>)
 800138e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_UART_MspInit+0xac>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_UART_MspInit+0xac>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_UART_MspInit+0xac>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013b0:	230c      	movs	r3, #12
 80013b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013c0:	230c      	movs	r3, #12
 80013c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f002 fa45 	bl	800385c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	3778      	adds	r7, #120	@ 0x78
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40008000 	.word	0x40008000
 80013e0:	40021000 	.word	0x40021000

080013e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e8:	f7ff ff48 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	@ (8001424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <LoopForever+0xe>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	@ (8001430 <LoopForever+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f004 fc2b 	bl	8005c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001416:	f7ff fcc5 	bl	8000da4 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   r0, =_estack
 800141c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001428:	080068c0 	.word	0x080068c0
  ldr r2, =_sbss
 800142c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001430:	2000033c 	.word	0x2000033c

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>

08001436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f001 fe4d 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f80e 	bl	8001468 <HAL_InitTick>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	e001      	b.n	800145c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001458:	f7ff fe04 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800145c:	79fb      	ldrb	r3, [r7, #7]

}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_InitTick+0x68>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d022      	beq.n	80014c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_InitTick+0x6c>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <HAL_InitTick+0x68>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001488:	fbb1 f3f3 	udiv	r3, r1, r3
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fe58 	bl	8003146 <HAL_SYSTICK_Config>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10f      	bne.n	80014bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	d809      	bhi.n	80014b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a2:	2200      	movs	r2, #0
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	f04f 30ff 	mov.w	r0, #4294967295
 80014aa:	f001 fe24 	bl	80030f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_InitTick+0x70>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e007      	b.n	80014c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e004      	b.n	80014c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e001      	b.n	80014c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_IncTick+0x1c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_IncTick+0x20>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_IncTick+0x1c>)
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	200001ec 	.word	0x200001ec
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200001ec 	.word	0x200001ec

08001518 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3360      	adds	r3, #96	@ 0x60
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <LL_ADC_SetOffset+0x44>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015b8:	bf00      	nop
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	03fff000 	.word	0x03fff000

080015c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3360      	adds	r3, #96	@ 0x60
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3360      	adds	r3, #96	@ 0x60
 8001604:	461a      	mov	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800162a:	b480      	push	{r7}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3360      	adds	r3, #96	@ 0x60
 800163a:	461a      	mov	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3360      	adds	r3, #96	@ 0x60
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	615a      	str	r2, [r3, #20]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3330      	adds	r3, #48	@ 0x30
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	211f      	movs	r1, #31
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0e9b      	lsrs	r3, r3, #26
 800171a:	f003 011f 	and.w	r1, r3, #31
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800173a:	b480      	push	{r7}
 800173c:	b087      	sub	sp, #28
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3314      	adds	r3, #20
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0e5b      	lsrs	r3, r3, #25
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0d1b      	lsrs	r3, r3, #20
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2107      	movs	r1, #7
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	0d1b      	lsrs	r3, r3, #20
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0318 	and.w	r3, r3, #24
 80017b2:	4908      	ldr	r1, [pc, #32]	@ (80017d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017b4:	40d9      	lsrs	r1, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	400b      	ands	r3, r1
 80017ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017be:	431a      	orrs	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	0007ffff 	.word	0x0007ffff

080017d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 031f 	and.w	r3, r3, #31
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001820:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6093      	str	r3, [r2, #8]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001848:	d101      	bne.n	800184e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800186c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001870:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001898:	d101      	bne.n	800189e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018e8:	f043 0202 	orr.w	r2, r3, #2
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <LL_ADC_IsEnabled+0x18>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <LL_ADC_IsEnabled+0x1a>
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b02      	cmp	r3, #2
 8001934:	d101      	bne.n	800193a <LL_ADC_IsDisableOngoing+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsDisableOngoing+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001984:	f043 0210 	orr.w	r2, r3, #16
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d101      	bne.n	80019b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019d2:	f043 0220 	orr.w	r2, r3, #32
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d101      	bne.n	80019fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e19b      	b.n	8001d5e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe ffef 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fef1 	bl	8001834 <LL_ADC_IsDeepPowerDownEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fed7 	bl	8001810 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff0c 	bl	8001884 <LL_ADC_IsInternalRegulatorEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fef0 	bl	800185c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a7c:	4b97      	ldr	r3, [pc, #604]	@ (8001cdc <HAL_ADC_Init+0x2d0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	4a97      	ldr	r2, [pc, #604]	@ (8001ce0 <HAL_ADC_Init+0x2d4>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f9      	bne.n	8001a92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff feee 	bl	8001884 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff62 	bl	8001998 <LL_ADC_REG_IsConversionOngoing>
 8001ad4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8134 	bne.w	8001d4c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8130 	bne.w	8001d4c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001af4:	f043 0202 	orr.w	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fefb 	bl	80018fc <LL_ADC_IsEnabled>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d137      	bne.n	8001b7c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b14:	d004      	beq.n	8001b20 <HAL_ADC_Init+0x114>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a72      	ldr	r2, [pc, #456]	@ (8001ce4 <HAL_ADC_Init+0x2d8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d10f      	bne.n	8001b40 <HAL_ADC_Init+0x134>
 8001b20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b24:	f7ff feea 	bl	80018fc <LL_ADC_IsEnabled>
 8001b28:	4604      	mov	r4, r0
 8001b2a:	486e      	ldr	r0, [pc, #440]	@ (8001ce4 <HAL_ADC_Init+0x2d8>)
 8001b2c:	f7ff fee6 	bl	80018fc <LL_ADC_IsEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4323      	orrs	r3, r4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e008      	b.n	8001b52 <HAL_ADC_Init+0x146>
 8001b40:	4869      	ldr	r0, [pc, #420]	@ (8001ce8 <HAL_ADC_Init+0x2dc>)
 8001b42:	f7ff fedb 	bl	80018fc <LL_ADC_IsEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b5e:	d004      	beq.n	8001b6a <HAL_ADC_Init+0x15e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a5f      	ldr	r2, [pc, #380]	@ (8001ce4 <HAL_ADC_Init+0x2d8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Init+0x162>
 8001b6a:	4a60      	ldr	r2, [pc, #384]	@ (8001cec <HAL_ADC_Init+0x2e0>)
 8001b6c:	e000      	b.n	8001b70 <HAL_ADC_Init+0x164>
 8001b6e:	4a60      	ldr	r2, [pc, #384]	@ (8001cf0 <HAL_ADC_Init+0x2e4>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f7ff fcce 	bl	8001518 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7f5b      	ldrb	r3, [r3, #29]
 8001b80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	045b      	lsls	r3, r3, #17
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b46      	ldr	r3, [pc, #280]	@ (8001cf4 <HAL_ADC_Init+0x2e8>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff feef 	bl	80019e6 <LL_ADC_INJ_IsConversionOngoing>
 8001c08:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d17b      	bne.n	8001d08 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d178      	bne.n	8001d08 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c1a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c22:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c32:	f023 0302 	bic.w	r3, r3, #2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6911      	ldr	r1, [r2, #16]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c76:	e013      	b.n	8001ca0 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c9c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d126      	bne.n	8001cf8 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	e015      	b.n	8001d08 <HAL_ADC_Init+0x2fc>
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	053e2d63 	.word	0x053e2d63
 8001ce4:	50000100 	.word	0x50000100
 8001ce8:	50000400 	.word	0x50000400
 8001cec:	50000300 	.word	0x50000300
 8001cf0:	50000700 	.word	0x50000700
 8001cf4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10c      	bne.n	8001d2a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f023 010f 	bic.w	r1, r3, #15
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d28:	e007      	b.n	8001d3a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 020f 	bic.w	r2, r2, #15
 8001d38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d4a:	e007      	b.n	8001d5c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	f043 0210 	orr.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop

08001d68 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_Start+0x1c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef0 <HAL_ADC_Start+0x188>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_Start+0x20>
 8001d84:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef4 <HAL_ADC_Start+0x18c>)
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Start+0x22>
 8001d88:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef8 <HAL_ADC_Start+0x190>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fd24 	bl	80017d8 <LL_ADC_GetMultimode>
 8001d90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fdfe 	bl	8001998 <LL_ADC_REG_IsConversionOngoing>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 809f 	bne.w	8001ee2 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Start+0x4a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e09a      	b.n	8001ee8 <HAL_ADC_Start+0x180>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 febc 	bl	8002b38 <ADC_Enable>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 8086 	bne.w	8001ed8 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a42      	ldr	r2, [pc, #264]	@ (8001ef0 <HAL_ADC_Start+0x188>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d002      	beq.n	8001df0 <HAL_ADC_Start+0x88>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e001      	b.n	8001df4 <HAL_ADC_Start+0x8c>
 8001df0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d002      	beq.n	8001e02 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e20:	f023 0206 	bic.w	r2, r3, #6
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	221c      	movs	r2, #28
 8001e36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef0 <HAL_ADC_Start+0x188>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d002      	beq.n	8001e50 <HAL_ADC_Start+0xe8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e001      	b.n	8001e54 <HAL_ADC_Start+0xec>
 8001e50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d008      	beq.n	8001e6e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d002      	beq.n	8001e6e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	d114      	bne.n	8001e98 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fd59 	bl	8001948 <LL_ADC_REG_StartConversion>
 8001e96:	e026      	b.n	8001ee6 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_ADC_Start+0x188>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d002      	beq.n	8001eb4 <HAL_ADC_Start+0x14c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e001      	b.n	8001eb8 <HAL_ADC_Start+0x150>
 8001eb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eb8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00f      	beq.n	8001ee6 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ece:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ed6:	e006      	b.n	8001ee6 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001ee0:	e001      	b.n	8001ee6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	50000100 	.word	0x50000100
 8001ef4:	50000300 	.word	0x50000300
 8001ef8:	50000700 	.word	0x50000700

08001efc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Stop+0x16>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e023      	b.n	8001f5a <HAL_ADC_Stop+0x5e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fd4f 	bl	80029c0 <ADC_ConversionStop>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d111      	bne.n	8001f50 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fe99 	bl	8002c64 <ADC_Disable>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x1e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a70      	ldr	r2, [pc, #448]	@ (8002140 <HAL_ADC_PollForConversion+0x1dc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_PollForConversion+0x22>
 8001f82:	4b70      	ldr	r3, [pc, #448]	@ (8002144 <HAL_ADC_PollForConversion+0x1e0>)
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_PollForConversion+0x24>
 8001f86:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_ADC_PollForConversion+0x1e4>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fc25 	bl	80017d8 <LL_ADC_GetMultimode>
 8001f8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d102      	bne.n	8001f9e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e037      	b.n	800200e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b05      	cmp	r3, #5
 8001fa8:	d002      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d111      	bne.n	8001fd4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc2:	f043 0220 	orr.w	r2, r3, #32
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0b3      	b.n	8002136 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fce:	2304      	movs	r3, #4
 8001fd0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fd2:	e01c      	b.n	800200e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_PollForConversion+0x84>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a57      	ldr	r2, [pc, #348]	@ (8002140 <HAL_ADC_PollForConversion+0x1dc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_PollForConversion+0x88>
 8001fe8:	4b56      	ldr	r3, [pc, #344]	@ (8002144 <HAL_ADC_PollForConversion+0x1e0>)
 8001fea:	e000      	b.n	8001fee <HAL_ADC_PollForConversion+0x8a>
 8001fec:	4b56      	ldr	r3, [pc, #344]	@ (8002148 <HAL_ADC_PollForConversion+0x1e4>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fc00 	bl	80017f4 <LL_ADC_GetMultiDMATransfer>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e095      	b.n	8002136 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800200a:	2304      	movs	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800200e:	f7ff fa77 	bl	8001500 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002014:	e021      	b.n	800205a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d01d      	beq.n	800205a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800201e:	f7ff fa6f 	bl	8001500 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d302      	bcc.n	8002034 <HAL_ADC_PollForConversion+0xd0>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d112      	bne.n	800205a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10b      	bne.n	800205a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002046:	f043 0204 	orr.w	r2, r3, #4
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e06d      	b.n	8002136 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0d6      	beq.n	8002016 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fb1f 	bl	80016bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7f5b      	ldrb	r3, [r3, #29]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d118      	bne.n	80020be <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b08      	cmp	r3, #8
 8002098:	d111      	bne.n	80020be <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_ADC_PollForConversion+0x1dc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d002      	beq.n	80020ce <HAL_ADC_PollForConversion+0x16a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e001      	b.n	80020d2 <HAL_ADC_PollForConversion+0x16e>
 80020ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d008      	beq.n	80020ec <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d002      	beq.n	80020ec <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d104      	bne.n	80020f6 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	e00d      	b.n	8002112 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_ADC_PollForConversion+0x1dc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d002      	beq.n	8002106 <HAL_ADC_PollForConversion+0x1a2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e001      	b.n	800210a <HAL_ADC_PollForConversion+0x1a6>
 8002106:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800210a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d104      	bne.n	8002122 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2208      	movs	r2, #8
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e008      	b.n	8002134 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	220c      	movs	r2, #12
 8002132:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	50000100 	.word	0x50000100
 8002144:	50000300 	.word	0x50000300
 8002148:	50000700 	.word	0x50000700

0800214c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0b6      	sub	sp, #216	@ 0xd8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_ADC_ConfigChannel+0x24>
 8002186:	2302      	movs	r3, #2
 8002188:	f000 bc04 	b.w	8002994 <HAL_ADC_ConfigChannel+0x82c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fbfd 	bl	8001998 <LL_ADC_REG_IsConversionOngoing>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 83e8 	bne.w	8002976 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f7ff fa95 	bl	80016e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fbeb 	bl	8001998 <LL_ADC_REG_IsConversionOngoing>
 80021c2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fc0b 	bl	80019e6 <LL_ADC_INJ_IsConversionOngoing>
 80021d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 81d9 	bne.w	8002590 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 81d4 	bne.w	8002590 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021f0:	d10f      	bne.n	8002212 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2200      	movs	r2, #0
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff fa9c 	bl	800173a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fa43 	bl	8001696 <LL_ADC_SetSamplingTimeCommonConfig>
 8002210:	e00e      	b.n	8002230 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	461a      	mov	r2, r3
 8002220:	f7ff fa8b 	bl	800173a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fa33 	bl	8001696 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d022      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002262:	f7ff f98d 	bl	8001580 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6919      	ldr	r1, [r3, #16]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	461a      	mov	r2, r3
 8002274:	f7ff f9d9 	bl	800162a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_ADC_ConfigChannel+0x126>
 8002288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800228c:	e000      	b.n	8002290 <HAL_ADC_ConfigChannel+0x128>
 800228e:	2300      	movs	r3, #0
 8002290:	461a      	mov	r2, r3
 8002292:	f7ff f9e5 	bl	8001660 <LL_ADC_SetOffsetSaturation>
 8002296:	e17b      	b.n	8002590 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f992 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x15c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f987 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 021f 	and.w	r2, r3, #31
 80022c2:	e01e      	b.n	8002302 <HAL_ADC_ConfigChannel+0x19a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f97c 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e004      	b.n	8002300 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_ADC_ConfigChannel+0x1b2>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	e018      	b.n	800234c <HAL_ADC_ConfigChannel+0x1e4>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800232e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800234c:	429a      	cmp	r2, r3
 800234e:	d106      	bne.n	800235e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f94b 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2101      	movs	r1, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f92f 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <HAL_ADC_ConfigChannel+0x222>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f924 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	e01e      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x260>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f919 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80023a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80023b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e004      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80023bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x278>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	e018      	b.n	8002412 <HAL_ADC_ConfigChannel+0x2aa>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e004      	b.n	8002412 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002408:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002412:	429a      	cmp	r2, r3
 8002414:	d106      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f8e8 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2102      	movs	r1, #2
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f8cc 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x2e8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff f8c1 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	e01e      	b.n	800248e <HAL_ADC_ConfigChannel+0x326>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f8b6 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800246e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002476:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e004      	b.n	800248c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002482:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x33e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0e9b      	lsrs	r3, r3, #26
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	e016      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x36c>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80024b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80024be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80024c6:	2320      	movs	r3, #32
 80024c8:	e004      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80024ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d106      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2200      	movs	r2, #0
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f887 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2103      	movs	r1, #3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f86b 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x3aa>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2103      	movs	r1, #3
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f860 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	e017      	b.n	8002542 <HAL_ADC_ConfigChannel+0x3da>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2103      	movs	r1, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f855 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800252a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800252c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800252e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_ADC_ConfigChannel+0x3f2>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	e011      	b.n	800257e <HAL_ADC_ConfigChannel+0x416>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800256a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800256c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e003      	b.n	800257e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800257e:	429a      	cmp	r2, r3
 8002580:	d106      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	2103      	movs	r1, #3
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f832 	bl	80015f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f9b1 	bl	80018fc <LL_ADC_IsEnabled>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 813d 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7ff f8ee 	bl	8001790 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4aa2      	ldr	r2, [pc, #648]	@ (8002844 <HAL_ADC_ConfigChannel+0x6dc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	f040 812e 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x480>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2b09      	cmp	r3, #9
 80025de:	bf94      	ite	ls
 80025e0:	2301      	movls	r3, #1
 80025e2:	2300      	movhi	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e019      	b.n	800261c <HAL_ADC_ConfigChannel+0x4b4>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2b09      	cmp	r3, #9
 8002614:	bf94      	ite	ls
 8002616:	2301      	movls	r3, #1
 8002618:	2300      	movhi	r3, #0
 800261a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261c:	2b00      	cmp	r3, #0
 800261e:	d079      	beq.n	8002714 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_ADC_ConfigChannel+0x4d4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	069b      	lsls	r3, r3, #26
 8002636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800263a:	e015      	b.n	8002668 <HAL_ADC_ConfigChannel+0x500>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800264a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800264c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800264e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	069b      	lsls	r3, r3, #26
 8002664:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x520>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	e017      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x550>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002698:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800269a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80026a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	ea42 0103 	orr.w	r1, r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <HAL_ADC_ConfigChannel+0x576>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	051b      	lsls	r3, r3, #20
 80026dc:	e018      	b.n	8002710 <HAL_ADC_ConfigChannel+0x5a8>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e003      	b.n	8002702 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002710:	430b      	orrs	r3, r1
 8002712:	e07e      	b.n	8002812 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x5c8>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	3301      	adds	r3, #1
 8002728:	069b      	lsls	r3, r3, #26
 800272a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800272e:	e015      	b.n	800275c <HAL_ADC_ConfigChannel+0x5f4>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	069b      	lsls	r3, r3, #26
 8002758:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_ADC_ConfigChannel+0x614>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	3301      	adds	r3, #1
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	e017      	b.n	80027ac <HAL_ADC_ConfigChannel+0x644>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	61fb      	str	r3, [r7, #28]
  return result;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	ea42 0103 	orr.w	r1, r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x670>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0e9b      	lsrs	r3, r3, #26
 80027c2:	3301      	adds	r3, #1
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	3b1e      	subs	r3, #30
 80027d0:	051b      	lsls	r3, r3, #20
 80027d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	e01b      	b.n	8002810 <HAL_ADC_ConfigChannel+0x6a8>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	613b      	str	r3, [r7, #16]
  return result;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002816:	4619      	mov	r1, r3
 8002818:	f7fe ff8f 	bl	800173a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_ADC_ConfigChannel+0x6e0>)
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80af 	beq.w	8002988 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002832:	d004      	beq.n	800283e <HAL_ADC_ConfigChannel+0x6d6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_ADC_ConfigChannel+0x6e4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d10a      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x6ec>
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_ADC_ConfigChannel+0x6e8>)
 8002840:	e009      	b.n	8002856 <HAL_ADC_ConfigChannel+0x6ee>
 8002842:	bf00      	nop
 8002844:	407f0000 	.word	0x407f0000
 8002848:	80080000 	.word	0x80080000
 800284c:	50000100 	.word	0x50000100
 8002850:	50000300 	.word	0x50000300
 8002854:	4b51      	ldr	r3, [pc, #324]	@ (800299c <HAL_ADC_ConfigChannel+0x834>)
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fe84 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 800285c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4e      	ldr	r2, [pc, #312]	@ (80029a0 <HAL_ADC_ConfigChannel+0x838>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x70c>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a4d      	ldr	r2, [pc, #308]	@ (80029a4 <HAL_ADC_ConfigChannel+0x83c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d134      	bne.n	80028de <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d12e      	bne.n	80028de <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002888:	d17e      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002892:	d004      	beq.n	800289e <HAL_ADC_ConfigChannel+0x736>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a43      	ldr	r2, [pc, #268]	@ (80029a8 <HAL_ADC_ConfigChannel+0x840>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x73a>
 800289e:	4a43      	ldr	r2, [pc, #268]	@ (80029ac <HAL_ADC_ConfigChannel+0x844>)
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x73c>
 80028a2:	4a3e      	ldr	r2, [pc, #248]	@ (800299c <HAL_ADC_ConfigChannel+0x834>)
 80028a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe fe45 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b4:	4b3e      	ldr	r3, [pc, #248]	@ (80029b0 <HAL_ADC_ConfigChannel+0x848>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	4a3e      	ldr	r2, [pc, #248]	@ (80029b4 <HAL_ADC_ConfigChannel+0x84c>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028dc:	e054      	b.n	8002988 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a35      	ldr	r2, [pc, #212]	@ (80029b8 <HAL_ADC_ConfigChannel+0x850>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d120      	bne.n	800292a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11a      	bne.n	800292a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028fc:	d144      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002906:	d004      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x7aa>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_ADC_ConfigChannel+0x840>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x7ae>
 8002912:	4a26      	ldr	r2, [pc, #152]	@ (80029ac <HAL_ADC_ConfigChannel+0x844>)
 8002914:	e000      	b.n	8002918 <HAL_ADC_ConfigChannel+0x7b0>
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_ADC_ConfigChannel+0x834>)
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800291c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7fe fe0b 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002928:	e02e      	b.n	8002988 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <HAL_ADC_ConfigChannel+0x854>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d129      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d123      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_ADC_ConfigChannel+0x840>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01e      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002952:	d004      	beq.n	800295e <HAL_ADC_ConfigChannel+0x7f6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a13      	ldr	r2, [pc, #76]	@ (80029a8 <HAL_ADC_ConfigChannel+0x840>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x7fa>
 800295e:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <HAL_ADC_ConfigChannel+0x844>)
 8002960:	e000      	b.n	8002964 <HAL_ADC_ConfigChannel+0x7fc>
 8002962:	4a0e      	ldr	r2, [pc, #56]	@ (800299c <HAL_ADC_ConfigChannel+0x834>)
 8002964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f7fe fde5 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
 8002974:	e008      	b.n	8002988 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002990:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002994:	4618      	mov	r0, r3
 8002996:	37d8      	adds	r7, #216	@ 0xd8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	50000700 	.word	0x50000700
 80029a0:	c3210000 	.word	0xc3210000
 80029a4:	90c00010 	.word	0x90c00010
 80029a8:	50000100 	.word	0x50000100
 80029ac:	50000300 	.word	0x50000300
 80029b0:	20000000 	.word	0x20000000
 80029b4:	053e2d63 	.word	0x053e2d63
 80029b8:	c7520000 	.word	0xc7520000
 80029bc:	cb840000 	.word	0xcb840000

080029c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe ffde 	bl	8001998 <LL_ADC_REG_IsConversionOngoing>
 80029dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe ffff 	bl	80019e6 <LL_ADC_INJ_IsConversionOngoing>
 80029e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8098 	beq.w	8002b28 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02a      	beq.n	8002a5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7f5b      	ldrb	r3, [r3, #29]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d126      	bne.n	8002a5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7f1b      	ldrb	r3, [r3, #28]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d122      	bne.n	8002a5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a1a:	e014      	b.n	8002a46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4a45      	ldr	r2, [pc, #276]	@ (8002b34 <ADC_ConversionStop+0x174>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d90d      	bls.n	8002a40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e074      	b.n	8002b2a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	3301      	adds	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b40      	cmp	r3, #64	@ 0x40
 8002a52:	d1e3      	bne.n	8002a1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2240      	movs	r2, #64	@ 0x40
 8002a5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d014      	beq.n	8002a8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe ff96 	bl	8001998 <LL_ADC_REG_IsConversionOngoing>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe ff53 	bl	8001922 <LL_ADC_IsDisableOngoing>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe ff72 	bl	8001970 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d014      	beq.n	8002abc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe ffa5 	bl	80019e6 <LL_ADC_INJ_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe ff3b 	bl	8001922 <LL_ADC_IsDisableOngoing>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe ff81 	bl	80019be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d005      	beq.n	8002ace <ADC_ConversionStop+0x10e>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d105      	bne.n	8002ad4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ac8:	230c      	movs	r3, #12
 8002aca:	617b      	str	r3, [r7, #20]
        break;
 8002acc:	e005      	b.n	8002ada <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	617b      	str	r3, [r7, #20]
        break;
 8002ad2:	e002      	b.n	8002ada <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]
        break;
 8002ad8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ada:	f7fe fd11 	bl	8001500 <HAL_GetTick>
 8002ade:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ae0:	e01b      	b.n	8002b1a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ae2:	f7fe fd0d 	bl	8001500 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d914      	bls.n	8002b1a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e007      	b.n	8002b2a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1dc      	bne.n	8002ae2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	a33fffff 	.word	0xa33fffff

08002b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe fed7 	bl	80018fc <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d176      	bne.n	8002c42 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <ADC_Enable+0x114>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e062      	b.n	8002c44 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fe92 	bl	80018ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b90:	d004      	beq.n	8002b9c <ADC_Enable+0x64>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2e      	ldr	r2, [pc, #184]	@ (8002c50 <ADC_Enable+0x118>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <ADC_Enable+0x68>
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <ADC_Enable+0x11c>)
 8002b9e:	e000      	b.n	8002ba2 <ADC_Enable+0x6a>
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <ADC_Enable+0x120>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fcde 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 8002ba8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d013      	beq.n	8002bda <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <ADC_Enable+0x124>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	4a29      	ldr	r2, [pc, #164]	@ (8002c60 <ADC_Enable+0x128>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bcc:	e002      	b.n	8002bd4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f9      	bne.n	8002bce <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bda:	f7fe fc91 	bl	8001500 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be0:	e028      	b.n	8002c34 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fe88 	bl	80018fc <LL_ADC_IsEnabled>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fe58 	bl	80018ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bfc:	f7fe fc80 	bl	8001500 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d914      	bls.n	8002c34 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d00d      	beq.n	8002c34 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e007      	b.n	8002c44 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d1cf      	bne.n	8002be2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	8000003f 	.word	0x8000003f
 8002c50:	50000100 	.word	0x50000100
 8002c54:	50000300 	.word	0x50000300
 8002c58:	50000700 	.word	0x50000700
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	053e2d63 	.word	0x053e2d63

08002c64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe fe56 	bl	8001922 <LL_ADC_IsDisableOngoing>
 8002c76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fe3d 	bl	80018fc <LL_ADC_IsEnabled>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d047      	beq.n	8002d18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d144      	bne.n	8002d18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030d 	and.w	r3, r3, #13
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10c      	bne.n	8002cb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fe17 	bl	80018d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2203      	movs	r2, #3
 8002cac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cae:	f7fe fc27 	bl	8001500 <HAL_GetTick>
 8002cb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cb4:	e029      	b.n	8002d0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	f043 0210 	orr.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e023      	b.n	8002d1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cd2:	f7fe fc15 	bl	8001500 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d914      	bls.n	8002d0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1dc      	bne.n	8002cd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <LL_ADC_IsEnabled>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <LL_ADC_IsEnabled+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_ADC_IsEnabled+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d101      	bne.n	8002d60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b0a1      	sub	sp, #132	@ 0x84
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0cb      	b.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d96:	2300      	movs	r3, #0
 8002d98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da6:	d102      	bne.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002da8:	4b61      	ldr	r3, [pc, #388]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	e001      	b.n	8002db2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0aa      	b.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffb8 	bl	8002d48 <LL_ADC_REG_IsConversionOngoing>
 8002dd8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ffb2 	bl	8002d48 <LL_ADC_REG_IsConversionOngoing>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 808c 	bne.w	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 8088 	bne.w	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dfc:	d004      	beq.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4b      	ldr	r2, [pc, #300]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8002e08:	4b4a      	ldr	r3, [pc, #296]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002e0a:	e000      	b.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8002e0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d041      	beq.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e2a:	035b      	lsls	r3, r3, #13
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3b      	ldr	r2, [pc, #236]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10f      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8002e48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e4c:	f7ff ff69 	bl	8002d22 <LL_ADC_IsEnabled>
 8002e50:	4604      	mov	r4, r0
 8002e52:	4837      	ldr	r0, [pc, #220]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e54:	f7ff ff65 	bl	8002d22 <LL_ADC_IsEnabled>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e008      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8002e68:	4834      	ldr	r0, [pc, #208]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002e6a:	f7ff ff5a 	bl	8002d22 <LL_ADC_IsEnabled>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04c      	beq.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e86:	f023 030f 	bic.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	431a      	orrs	r2, r3
 8002e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e98:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e9a:	e03d      	b.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ea6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb0:	d004      	beq.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10f      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002ebc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ec0:	f7ff ff2f 	bl	8002d22 <LL_ADC_IsEnabled>
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	481a      	ldr	r0, [pc, #104]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002ec8:	f7ff ff2b 	bl	8002d22 <LL_ADC_IsEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e008      	b.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8002edc:	4817      	ldr	r0, [pc, #92]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002ede:	f7ff ff20 	bl	8002d22 <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002efa:	f023 030f 	bic.w	r3, r3, #15
 8002efe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002f00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f02:	e009      	b.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002f16:	e000      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3784      	adds	r7, #132	@ 0x84
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	50000100 	.word	0x50000100
 8002f34:	50000300 	.word	0x50000300
 8002f38:	50000700 	.word	0x50000700
 8002f3c:	50000400 	.word	0x50000400

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	@ (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	@ (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	@ (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	@ 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003104:	f7ff ff40 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 8003108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff90 	bl	8003034 <NVIC_EncodePriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff5f 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff33 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffa4 	bl	800309c <SysTick_Config>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e147      	b.n	8003402 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fce0 	bl	8000b4c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0210 	bic.w	r2, r2, #16
 800319a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7fe f9b0 	bl	8001500 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031a2:	e012      	b.n	80031ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031a4:	f7fe f9ac 	bl	8001500 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d90b      	bls.n	80031ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e11b      	b.n	8003402 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d0e5      	beq.n	80031a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e8:	f7fe f98a 	bl	8001500 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031ee:	e012      	b.n	8003216 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031f0:	f7fe f986 	bl	8001500 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	d90b      	bls.n	8003216 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0f5      	b.n	8003402 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0e5      	beq.n	80031f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0202 	orr.w	r2, r2, #2
 8003232:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a74      	ldr	r2, [pc, #464]	@ (800340c <HAL_FDCAN_Init+0x2ac>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d103      	bne.n	8003246 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800323e:	4a74      	ldr	r2, [pc, #464]	@ (8003410 <HAL_FDCAN_Init+0x2b0>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7c1b      	ldrb	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325c:	619a      	str	r2, [r3, #24]
 800325e:	e007      	b.n	8003270 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800326e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7c5b      	ldrb	r3, [r3, #17]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003286:	619a      	str	r2, [r3, #24]
 8003288:	e007      	b.n	800329a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003298:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7c9b      	ldrb	r3, [r3, #18]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d108      	bne.n	80032b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032b0:	619a      	str	r2, [r3, #24]
 80032b2:	e007      	b.n	80032c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80032e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0210 	bic.w	r2, r2, #16
 80032f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0204 	orr.w	r2, r2, #4
 8003310:	619a      	str	r2, [r3, #24]
 8003312:	e02c      	b.n	800336e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d028      	beq.n	800336e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d01c      	beq.n	800335e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003332:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0210 	orr.w	r2, r2, #16
 8003342:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d110      	bne.n	800336e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0220 	orr.w	r2, r2, #32
 800335a:	619a      	str	r2, [r3, #24]
 800335c:	e007      	b.n	800336e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0220 	orr.w	r2, r2, #32
 800336c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	3b01      	subs	r3, #1
 8003374:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	3b01      	subs	r3, #1
 800337c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800337e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003386:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003396:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003398:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033a2:	d115      	bne.n	80033d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	3b01      	subs	r3, #1
 80033b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	3b01      	subs	r3, #1
 80033ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	3b01      	subs	r3, #1
 80033c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f9d6 	bl	8003798 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40006400 	.word	0x40006400
 8003410:	40006500 	.word	0x40006500

08003414 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d110      	bne.n	800344a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e006      	b.n	8003458 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344e:	f043 0204 	orr.w	r2, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	@ 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003480:	4013      	ands	r3, r2
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003498:	4013      	ands	r3, r2
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	4013      	ands	r3, r2
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ba:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80034be:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	4013      	ands	r3, r2
 80034ca:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80034d6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2240      	movs	r2, #64	@ 0x40
 800350e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f921 	bl	8003758 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d014      	beq.n	8003554 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003532:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800354a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800354c:	6939      	ldr	r1, [r7, #16]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8e3 	bl	800371a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003560:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8a2 	bl	80036ae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003576:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8a2 	bl	80036c4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800358e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8a2 	bl	80036da <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00c      	beq.n	80035ba <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f89b 	bl	80036f0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d013      	beq.n	80035f6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035d6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f887 	bl	8003704 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00c      	beq.n	800361a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003612:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f88b 	bl	8003730 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00c      	beq.n	800363e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003636:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f883 	bl	8003744 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00f      	beq.n	8003668 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800365a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003660:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f881 	bl	8003780 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f863 	bl	800376c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80036a6:	bf00      	nop
 80036a8:	3730      	adds	r7, #48	@ 0x30
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80037a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003854 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80037a2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003858 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d103      	bne.n	80037b6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80037b4:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ea:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f2:	061a      	lsls	r2, r3, #24
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e005      	b.n	8003838 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d3f3      	bcc.n	800382c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	4000a400 	.word	0x4000a400
 8003858:	40006800 	.word	0x40006800

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800386a:	e15a      	b.n	8003b22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 814c 	beq.w	8003b1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003898:	2b02      	cmp	r3, #2
 800389a:	d130      	bne.n	80038fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038d2:	2201      	movs	r2, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0201 	and.w	r2, r3, #1
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b03      	cmp	r3, #3
 8003908:	d017      	beq.n	800393a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d123      	bne.n	800398e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0203 	and.w	r2, r3, #3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a6 	beq.w	8003b1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b40 <HAL_GPIO_Init+0x2e4>)
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003b40 <HAL_GPIO_Init+0x2e4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6613      	str	r3, [r2, #96]	@ 0x60
 80039dc:	4b58      	ldr	r3, [pc, #352]	@ (8003b40 <HAL_GPIO_Init+0x2e4>)
 80039de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e8:	4a56      	ldr	r2, [pc, #344]	@ (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a12:	d01f      	beq.n	8003a54 <HAL_GPIO_Init+0x1f8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a4c      	ldr	r2, [pc, #304]	@ (8003b48 <HAL_GPIO_Init+0x2ec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d019      	beq.n	8003a50 <HAL_GPIO_Init+0x1f4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8003b4c <HAL_GPIO_Init+0x2f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_GPIO_Init+0x1f0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	@ (8003b50 <HAL_GPIO_Init+0x2f4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00d      	beq.n	8003a48 <HAL_GPIO_Init+0x1ec>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a49      	ldr	r2, [pc, #292]	@ (8003b54 <HAL_GPIO_Init+0x2f8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <HAL_GPIO_Init+0x1e8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a48      	ldr	r2, [pc, #288]	@ (8003b58 <HAL_GPIO_Init+0x2fc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_GPIO_Init+0x1e4>
 8003a3c:	2305      	movs	r3, #5
 8003a3e:	e00a      	b.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a40:	2306      	movs	r3, #6
 8003a42:	e008      	b.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a44:	2304      	movs	r3, #4
 8003a46:	e006      	b.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e004      	b.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e002      	b.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a54:	2300      	movs	r3, #0
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	f002 0203 	and.w	r2, r2, #3
 8003a5c:	0092      	lsls	r2, r2, #2
 8003a5e:	4093      	lsls	r3, r2
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a66:	4937      	ldr	r1, [pc, #220]	@ (8003b44 <HAL_GPIO_Init+0x2e8>)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a74:	4b39      	ldr	r3, [pc, #228]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a98:	4a30      	ldr	r2, [pc, #192]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ac2:	4a26      	ldr	r2, [pc, #152]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aec:	4a1b      	ldr	r2, [pc, #108]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003af2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b16:	4a11      	ldr	r2, [pc, #68]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f47f ae9d 	bne.w	800386c <HAL_GPIO_Init+0x10>
  }
}
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40010000 	.word	0x40010000
 8003b48:	48000400 	.word	0x48000400
 8003b4c:	48000800 	.word	0x48000800
 8003b50:	48000c00 	.word	0x48000c00
 8003b54:	48001000 	.word	0x48001000
 8003b58:	48001400 	.word	0x48001400
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d141      	bne.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d131      	bne.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b7c:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b82:	4a46      	ldr	r2, [pc, #280]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b8c:	4b43      	ldr	r3, [pc, #268]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b94:	4a41      	ldr	r2, [pc, #260]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b9c:	4b40      	ldr	r3, [pc, #256]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2232      	movs	r2, #50	@ 0x32
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	0c9b      	lsrs	r3, r3, #18
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb2:	e002      	b.n	8003bba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bba:	4b38      	ldr	r3, [pc, #224]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc6:	d102      	bne.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f2      	bne.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bce:	4b33      	ldr	r3, [pc, #204]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bda:	d158      	bne.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e057      	b.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003be6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bf0:	e04d      	b.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf8:	d141      	bne.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bfa:	4b28      	ldr	r3, [pc, #160]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d131      	bne.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c08:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c0e:	4a23      	ldr	r2, [pc, #140]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c18:	4b20      	ldr	r3, [pc, #128]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c20:	4a1e      	ldr	r2, [pc, #120]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2232      	movs	r2, #50	@ 0x32
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	0c9b      	lsrs	r3, r3, #18
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c3e:	e002      	b.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c52:	d102      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f2      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c5a:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c66:	d112      	bne.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e011      	b.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c7c:	e007      	b.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c7e:	4b07      	ldr	r3, [pc, #28]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c86:	4a05      	ldr	r2, [pc, #20]	@ (8003c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	431bde83 	.word	0x431bde83

08003ca8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003cac:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a04      	ldr	r2, [pc, #16]	@ (8003cc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cb6:	6093      	str	r3, [r2, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40007000 	.word	0x40007000

08003cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e2fe      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d075      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce6:	4b97      	ldr	r3, [pc, #604]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf0:	4b94      	ldr	r3, [pc, #592]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_OscConfig+0x3e>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_OscConfig+0x44>
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05b      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x108>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d157      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e2d9      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_OscConfig+0x74>
 8003d2e:	4b85      	ldr	r3, [pc, #532]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a84      	ldr	r2, [pc, #528]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e01d      	b.n	8003d78 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x98>
 8003d46:	4b7f      	ldr	r3, [pc, #508]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b7c      	ldr	r3, [pc, #496]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7b      	ldr	r2, [pc, #492]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0xb0>
 8003d60:	4b78      	ldr	r3, [pc, #480]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a77      	ldr	r2, [pc, #476]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b75      	ldr	r3, [pc, #468]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a74      	ldr	r2, [pc, #464]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fd fbbe 	bl	8001500 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fd fbba 	bl	8001500 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	@ 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e29e      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0xc0>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd fbaa 	bl	8001500 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fd fba6 	bl	8001500 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	@ 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e28a      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	4b60      	ldr	r3, [pc, #384]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0xe8>
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dde:	4b59      	ldr	r3, [pc, #356]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de8:	4b56      	ldr	r3, [pc, #344]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	d102      	bne.n	8003dfe <HAL_RCC_OscConfig+0x136>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d002      	beq.n	8003e04 <HAL_RCC_OscConfig+0x13c>
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d11f      	bne.n	8003e44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	4b4f      	ldr	r3, [pc, #316]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x154>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e25d      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b49      	ldr	r3, [pc, #292]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	4946      	ldr	r1, [pc, #280]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e30:	4b45      	ldr	r3, [pc, #276]	@ (8003f48 <HAL_RCC_OscConfig+0x280>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd fb17 	bl	8001468 <HAL_InitTick>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d043      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e249      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d023      	beq.n	8003e94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fb52 	bl	8001500 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e60:	f7fd fb4e 	bl	8001500 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e232      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e72:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	4b31      	ldr	r3, [pc, #196]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	061b      	lsls	r3, r3, #24
 8003e8c:	492d      	ldr	r1, [pc, #180]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
 8003e92:	e01a      	b.n	8003eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e94:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2a      	ldr	r2, [pc, #168]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fb2e 	bl	8001500 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fd fb2a 	bl	8001500 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e20e      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eba:	4b22      	ldr	r3, [pc, #136]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1e0>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d041      	beq.n	8003f5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ede:	4b19      	ldr	r3, [pc, #100]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee4:	4a17      	ldr	r2, [pc, #92]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd fb07 	bl	8001500 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fd fb03 	bl	8001500 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e1e7      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ef      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x22e>
 8003f16:	e020      	b.n	8003f5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f18:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f1e:	4a09      	ldr	r2, [pc, #36]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fd faea 	bl	8001500 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f2e:	e00d      	b.n	8003f4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd fae6 	bl	8001500 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d906      	bls.n	8003f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e1ca      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ea      	bne.n	8003f30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a6 	beq.w	80040b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f6c:	4b84      	ldr	r3, [pc, #528]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2b4>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x2b6>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	4b7f      	ldr	r3, [pc, #508]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f86:	4a7e      	ldr	r2, [pc, #504]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9e:	4b79      	ldr	r3, [pc, #484]	@ (8004184 <HAL_RCC_OscConfig+0x4bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003faa:	4b76      	ldr	r3, [pc, #472]	@ (8004184 <HAL_RCC_OscConfig+0x4bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a75      	ldr	r2, [pc, #468]	@ (8004184 <HAL_RCC_OscConfig+0x4bc>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fd faa3 	bl	8001500 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fd fa9f 	bl	8001500 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e183      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8004184 <HAL_RCC_OscConfig+0x4bc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d108      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x32e>
 8003fe4:	4b66      	ldr	r3, [pc, #408]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	4a65      	ldr	r2, [pc, #404]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ff4:	e024      	b.n	8004040 <HAL_RCC_OscConfig+0x378>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d110      	bne.n	8004020 <HAL_RCC_OscConfig+0x358>
 8003ffe:	4b60      	ldr	r3, [pc, #384]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004004:	4a5e      	ldr	r2, [pc, #376]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800400e:	4b5c      	ldr	r3, [pc, #368]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004014:	4a5a      	ldr	r2, [pc, #360]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800401e:	e00f      	b.n	8004040 <HAL_RCC_OscConfig+0x378>
 8004020:	4b57      	ldr	r3, [pc, #348]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	4a56      	ldr	r2, [pc, #344]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004030:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	4a52      	ldr	r2, [pc, #328]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d016      	beq.n	8004076 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fa5a 	bl	8001500 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd fa56 	bl	8001500 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e138      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004066:	4b46      	ldr	r3, [pc, #280]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ed      	beq.n	8004050 <HAL_RCC_OscConfig+0x388>
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd fa43 	bl	8001500 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fd fa3f 	bl	8001500 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e121      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004094:	4b3a      	ldr	r3, [pc, #232]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ed      	bne.n	800407e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b35      	ldr	r3, [pc, #212]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	4a34      	ldr	r2, [pc, #208]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03c      	beq.n	800413a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 80040ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd fa12 	bl	8001500 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e0:	f7fd fa0e 	bl	8001500 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0f2      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040f2:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 80040f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <HAL_RCC_OscConfig+0x418>
 8004100:	e01b      	b.n	800413a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004102:	4b1f      	ldr	r3, [pc, #124]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004104:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004108:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fd f9f5 	bl	8001500 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800411a:	f7fd f9f1 	bl	8001500 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0d5      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 800412e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ef      	bne.n	800411a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80c9 	beq.w	80042d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004144:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b0c      	cmp	r3, #12
 800414e:	f000 8083 	beq.w	8004258 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d15e      	bne.n	8004218 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd f9cb 	bl	8001500 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	e00c      	b.n	8004188 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7fd f9c7 	bl	8001500 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d905      	bls.n	8004188 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0ab      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004188:	4b55      	ldr	r3, [pc, #340]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ec      	bne.n	800416e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004194:	4b52      	ldr	r3, [pc, #328]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	4b52      	ldr	r3, [pc, #328]	@ (80042e4 <HAL_RCC_OscConfig+0x61c>)
 800419a:	4013      	ands	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a11      	ldr	r1, [r2, #32]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041a4:	3a01      	subs	r2, #1
 80041a6:	0112      	lsls	r2, r2, #4
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80041ae:	0212      	lsls	r2, r2, #8
 80041b0:	4311      	orrs	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041b6:	0852      	lsrs	r2, r2, #1
 80041b8:	3a01      	subs	r2, #1
 80041ba:	0552      	lsls	r2, r2, #21
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041c2:	0852      	lsrs	r2, r2, #1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	0652      	lsls	r2, r2, #25
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041ce:	06d2      	lsls	r2, r2, #27
 80041d0:	430a      	orrs	r2, r1
 80041d2:	4943      	ldr	r1, [pc, #268]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d8:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a40      	ldr	r2, [pc, #256]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 80041de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041e4:	4b3e      	ldr	r3, [pc, #248]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a3d      	ldr	r2, [pc, #244]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd f986 	bl	8001500 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd f982 	bl	8001500 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e066      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	4b35      	ldr	r3, [pc, #212]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x530>
 8004216:	e05e      	b.n	80042d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd f96c 	bl	8001500 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd f968 	bl	8001500 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04c      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423e:	4b28      	ldr	r3, [pc, #160]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800424a:	4b25      	ldr	r3, [pc, #148]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	4924      	ldr	r1, [pc, #144]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_OscConfig+0x620>)
 8004252:	4013      	ands	r3, r2
 8004254:	60cb      	str	r3, [r1, #12]
 8004256:	e03e      	b.n	80042d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e039      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004264:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <HAL_RCC_OscConfig+0x618>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f003 0203 	and.w	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	429a      	cmp	r2, r3
 8004276:	d12c      	bne.n	80042d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	3b01      	subs	r3, #1
 8004284:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d123      	bne.n	80042d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004296:	429a      	cmp	r2, r3
 8004298:	d11b      	bne.n	80042d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d113      	bne.n	80042d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	3b01      	subs	r3, #1
 80042cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	019f800c 	.word	0x019f800c
 80042e8:	feeefffc 	.word	0xfeeefffc

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e11e      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b91      	ldr	r3, [pc, #580]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d910      	bls.n	8004334 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b8e      	ldr	r3, [pc, #568]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	498c      	ldr	r1, [pc, #560]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b8a      	ldr	r3, [pc, #552]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e106      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d073      	beq.n	8004428 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d129      	bne.n	800439c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004348:	4b81      	ldr	r3, [pc, #516]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0f4      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004358:	f000 f99e 	bl	8004698 <RCC_GetSysClockFreqFromPLLSource>
 800435c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4a7c      	ldr	r2, [pc, #496]	@ (8004554 <HAL_RCC_ClockConfig+0x268>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d93f      	bls.n	80043e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004366:	4b7a      	ldr	r3, [pc, #488]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800437a:	2b00      	cmp	r3, #0
 800437c:	d033      	beq.n	80043e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d12f      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004386:	4b72      	ldr	r3, [pc, #456]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800438e:	4a70      	ldr	r2, [pc, #448]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004394:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e024      	b.n	80043e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0c6      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b4:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0be      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043c4:	f000 f8ce 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4a61      	ldr	r2, [pc, #388]	@ (8004554 <HAL_RCC_ClockConfig+0x268>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d909      	bls.n	80043e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043da:	4a5d      	ldr	r2, [pc, #372]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80043dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4957      	ldr	r1, [pc, #348]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f8:	f7fd f882 	bl	8001500 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fd f87e 	bl	8001500 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e095      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b4e      	ldr	r3, [pc, #312]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d023      	beq.n	800447c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b43      	ldr	r3, [pc, #268]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a42      	ldr	r2, [pc, #264]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800444a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004458:	4b3d      	ldr	r3, [pc, #244]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004460:	4a3b      	ldr	r2, [pc, #236]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004462:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004468:	4b39      	ldr	r3, [pc, #228]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4936      	ldr	r1, [pc, #216]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
 800447a:	e008      	b.n	800448e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b80      	cmp	r3, #128	@ 0x80
 8004480:	d105      	bne.n	800448e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004482:	4b33      	ldr	r3, [pc, #204]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4a32      	ldr	r2, [pc, #200]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004488:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800448c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800448e:	4b2f      	ldr	r3, [pc, #188]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d21d      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449c:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 020f 	bic.w	r2, r3, #15
 80044a4:	4929      	ldr	r1, [pc, #164]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044ac:	f7fd f828 	bl	8001500 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b4:	f7fd f824 	bl	8001500 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e03b      	b.n	8004542 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b20      	ldr	r3, [pc, #128]	@ (800454c <HAL_RCC_ClockConfig+0x260>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1ed      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4917      	ldr	r1, [pc, #92]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004502:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490f      	ldr	r1, [pc, #60]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004516:	f000 f825 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <HAL_RCC_ClockConfig+0x264>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490c      	ldr	r1, [pc, #48]	@ (8004558 <HAL_RCC_ClockConfig+0x26c>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <HAL_RCC_ClockConfig+0x270>)
 8004534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004536:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <HAL_RCC_ClockConfig+0x274>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc ff94 	bl	8001468 <HAL_InitTick>
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40022000 	.word	0x40022000
 8004550:	40021000 	.word	0x40021000
 8004554:	04c4b400 	.word	0x04c4b400
 8004558:	0800683c 	.word	0x0800683c
 800455c:	20000000 	.word	0x20000000
 8004560:	20000004 	.word	0x20000004

08004564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800456a:	4b2c      	ldr	r3, [pc, #176]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b04      	cmp	r3, #4
 8004574:	d102      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004576:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	e047      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800457c:	4b27      	ldr	r3, [pc, #156]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d102      	bne.n	800458e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004588:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <HAL_RCC_GetSysClockFreq+0xc0>)
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	e03e      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800458e:	4b23      	ldr	r3, [pc, #140]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d136      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800459a:	4b20      	ldr	r3, [pc, #128]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a4:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3301      	adds	r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004624 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	4a16      	ldr	r2, [pc, #88]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c2:	68d2      	ldr	r2, [r2, #12]
 80045c4:	0a12      	lsrs	r2, r2, #8
 80045c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
      break;
 80045d0:	e00c      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045d2:	4a13      	ldr	r2, [pc, #76]	@ (8004620 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045da:	4a10      	ldr	r2, [pc, #64]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045dc:	68d2      	ldr	r2, [r2, #12]
 80045de:	0a12      	lsrs	r2, r2, #8
 80045e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
      break;
 80045ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	0e5b      	lsrs	r3, r3, #25
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e001      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800460c:	693b      	ldr	r3, [r7, #16]
}
 800460e:	4618      	mov	r0, r3
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	00f42400 	.word	0x00f42400
 8004624:	007a1200 	.word	0x007a1200

08004628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000000 	.word	0x20000000

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4904      	ldr	r1, [pc, #16]	@ (8004668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000
 8004668:	0800684c 	.word	0x0800684c

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004670:	f7ff ffda 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0adb      	lsrs	r3, r3, #11
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4904      	ldr	r1, [pc, #16]	@ (8004694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800468c:	4618      	mov	r0, r3
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000
 8004694:	0800684c 	.word	0x0800684c

08004698 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800469e:	4b1e      	ldr	r3, [pc, #120]	@ (8004718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d10c      	bne.n	80046d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046bc:	4a17      	ldr	r2, [pc, #92]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	4a14      	ldr	r2, [pc, #80]	@ (8004718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046c6:	68d2      	ldr	r2, [r2, #12]
 80046c8:	0a12      	lsrs	r2, r2, #8
 80046ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	617b      	str	r3, [r7, #20]
    break;
 80046d4:	e00c      	b.n	80046f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046d6:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	4a0e      	ldr	r2, [pc, #56]	@ (8004718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e0:	68d2      	ldr	r2, [r2, #12]
 80046e2:	0a12      	lsrs	r2, r2, #8
 80046e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    break;
 80046ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f0:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0e5b      	lsrs	r3, r3, #25
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	3301      	adds	r3, #1
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800470a:	687b      	ldr	r3, [r7, #4]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40021000 	.word	0x40021000
 800471c:	007a1200 	.word	0x007a1200
 8004720:	00f42400 	.word	0x00f42400

08004724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800472c:	2300      	movs	r3, #0
 800472e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004730:	2300      	movs	r3, #0
 8004732:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8098 	beq.w	8004872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b43      	ldr	r3, [pc, #268]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b40      	ldr	r3, [pc, #256]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	4a3f      	ldr	r2, [pc, #252]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475c:	6593      	str	r3, [r2, #88]	@ 0x58
 800475e:	4b3d      	ldr	r3, [pc, #244]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800476e:	4b3a      	ldr	r3, [pc, #232]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a39      	ldr	r2, [pc, #228]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800477a:	f7fc fec1 	bl	8001500 <HAL_GetTick>
 800477e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004780:	e009      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fc febd 	bl	8001500 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d902      	bls.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	74fb      	strb	r3, [r7, #19]
        break;
 8004794:	e005      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004796:	4b30      	ldr	r3, [pc, #192]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ef      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d159      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01e      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d019      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047c4:	4b23      	ldr	r3, [pc, #140]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d0:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047f0:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fc fe7d 	bl	8001500 <HAL_GetTick>
 8004806:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	e00b      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fe79 	bl	8001500 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d902      	bls.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	74fb      	strb	r3, [r7, #19]
            break;
 8004820:	e006      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ec      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004844:	4903      	ldr	r1, [pc, #12]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800484c:	e008      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	74bb      	strb	r3, [r7, #18]
 8004852:	e005      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004854:	40021000 	.word	0x40021000
 8004858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004860:	7c7b      	ldrb	r3, [r7, #17]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004866:	4ba7      	ldr	r3, [pc, #668]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	4aa6      	ldr	r2, [pc, #664]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004870:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800487e:	4ba1      	ldr	r3, [pc, #644]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	f023 0203 	bic.w	r2, r3, #3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	499d      	ldr	r1, [pc, #628]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a0:	4b98      	ldr	r3, [pc, #608]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	f023 020c 	bic.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4995      	ldr	r1, [pc, #596]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c2:	4b90      	ldr	r3, [pc, #576]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	498c      	ldr	r1, [pc, #560]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048e4:	4b87      	ldr	r3, [pc, #540]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	4984      	ldr	r1, [pc, #528]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004906:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	497b      	ldr	r1, [pc, #492]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004928:	4b76      	ldr	r3, [pc, #472]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	4973      	ldr	r1, [pc, #460]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004950:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	496a      	ldr	r1, [pc, #424]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800496c:	4b65      	ldr	r3, [pc, #404]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	4962      	ldr	r1, [pc, #392]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800498e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	4959      	ldr	r1, [pc, #356]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b0:	4b54      	ldr	r3, [pc, #336]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	4951      	ldr	r1, [pc, #324]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d015      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	4948      	ldr	r1, [pc, #288]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f0:	d105      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f2:	4b44      	ldr	r3, [pc, #272]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4a43      	ldr	r2, [pc, #268]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049fc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d015      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	493a      	ldr	r1, [pc, #232]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a28:	d105      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2a:	4b36      	ldr	r3, [pc, #216]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a34:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a42:	4b30      	ldr	r3, [pc, #192]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a50:	492c      	ldr	r1, [pc, #176]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a60:	d105      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a62:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a6c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d015      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a7a:	4b22      	ldr	r3, [pc, #136]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	491e      	ldr	r1, [pc, #120]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aa4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d015      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab2:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	4910      	ldr	r1, [pc, #64]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ad0:	d105      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004adc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	4902      	ldr	r1, [pc, #8]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b10:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a20      	ldr	r2, [pc, #128]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d015      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b28:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	4918      	ldr	r1, [pc, #96]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b46:	d105      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b48:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a12      	ldr	r2, [pc, #72]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d015      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b60:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6e:	490a      	ldr	r1, [pc, #40]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e042      	b.n	8004c34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fc fbb7 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2224      	movs	r2, #36	@ 0x24
 8004bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fbb2 	bl	8005350 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f8b3 	bl	8004d58 <UART_SetConfig>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e01b      	b.n	8004c34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fc31 	bl	8005494 <UART_CheckIdleState>
 8004c32:	4603      	mov	r3, r0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	@ 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d17b      	bne.n	8004d4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_UART_Transmit+0x26>
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e074      	b.n	8004d50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2221      	movs	r2, #33	@ 0x21
 8004c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c76:	f7fc fc43 	bl	8001500 <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c94:	d108      	bne.n	8004ca8 <HAL_UART_Transmit+0x6c>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d104      	bne.n	8004ca8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e003      	b.n	8004cb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb0:	e030      	b.n	8004d14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2180      	movs	r1, #128	@ 0x80
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fc93 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e03d      	b.n	8004d50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3302      	adds	r3, #2
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e007      	b.n	8004d02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1c8      	bne.n	8004cb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	2140      	movs	r1, #64	@ 0x40
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fc5c 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e006      	b.n	8004d50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b08c      	sub	sp, #48	@ 0x30
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4baa      	ldr	r3, [pc, #680]	@ (8005030 <UART_SetConfig+0x2d8>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a9f      	ldr	r2, [pc, #636]	@ (8005034 <UART_SetConfig+0x2dc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004dce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	f023 010f 	bic.w	r1, r3, #15
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a90      	ldr	r2, [pc, #576]	@ (8005038 <UART_SetConfig+0x2e0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d125      	bne.n	8004e48 <UART_SetConfig+0xf0>
 8004dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800503c <UART_SetConfig+0x2e4>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d81a      	bhi.n	8004e40 <UART_SetConfig+0xe8>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <UART_SetConfig+0xb8>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e31 	.word	0x08004e31
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e26:	e116      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2e:	e112      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e36:	e10e      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3e:	e10a      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e46:	e106      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a7c      	ldr	r2, [pc, #496]	@ (8005040 <UART_SetConfig+0x2e8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d138      	bne.n	8004ec4 <UART_SetConfig+0x16c>
 8004e52:	4b7a      	ldr	r3, [pc, #488]	@ (800503c <UART_SetConfig+0x2e4>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	d82d      	bhi.n	8004ebc <UART_SetConfig+0x164>
 8004e60:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <UART_SetConfig+0x110>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e9d 	.word	0x08004e9d
 8004e6c:	08004ebd 	.word	0x08004ebd
 8004e70:	08004ebd 	.word	0x08004ebd
 8004e74:	08004ebd 	.word	0x08004ebd
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	08004ebd 	.word	0x08004ebd
 8004e80:	08004ebd 	.word	0x08004ebd
 8004e84:	08004ebd 	.word	0x08004ebd
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	08004ebd 	.word	0x08004ebd
 8004e90:	08004ebd 	.word	0x08004ebd
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea2:	e0d8      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	e0d4      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb2:	e0d0      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e0cc      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	e0c8      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8005044 <UART_SetConfig+0x2ec>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d125      	bne.n	8004f1a <UART_SetConfig+0x1c2>
 8004ece:	4b5b      	ldr	r3, [pc, #364]	@ (800503c <UART_SetConfig+0x2e4>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ed8:	2b30      	cmp	r3, #48	@ 0x30
 8004eda:	d016      	beq.n	8004f0a <UART_SetConfig+0x1b2>
 8004edc:	2b30      	cmp	r3, #48	@ 0x30
 8004ede:	d818      	bhi.n	8004f12 <UART_SetConfig+0x1ba>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d00a      	beq.n	8004efa <UART_SetConfig+0x1a2>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d814      	bhi.n	8004f12 <UART_SetConfig+0x1ba>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <UART_SetConfig+0x19a>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d008      	beq.n	8004f02 <UART_SetConfig+0x1aa>
 8004ef0:	e00f      	b.n	8004f12 <UART_SetConfig+0x1ba>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef8:	e0ad      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004efa:	2302      	movs	r3, #2
 8004efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f00:	e0a9      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f02:	2304      	movs	r3, #4
 8004f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f08:	e0a5      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f10:	e0a1      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f12:	2310      	movs	r3, #16
 8004f14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f18:	e09d      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8005048 <UART_SetConfig+0x2f0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d125      	bne.n	8004f70 <UART_SetConfig+0x218>
 8004f24:	4b45      	ldr	r3, [pc, #276]	@ (800503c <UART_SetConfig+0x2e4>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f30:	d016      	beq.n	8004f60 <UART_SetConfig+0x208>
 8004f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f34:	d818      	bhi.n	8004f68 <UART_SetConfig+0x210>
 8004f36:	2b80      	cmp	r3, #128	@ 0x80
 8004f38:	d00a      	beq.n	8004f50 <UART_SetConfig+0x1f8>
 8004f3a:	2b80      	cmp	r3, #128	@ 0x80
 8004f3c:	d814      	bhi.n	8004f68 <UART_SetConfig+0x210>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <UART_SetConfig+0x1f0>
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d008      	beq.n	8004f58 <UART_SetConfig+0x200>
 8004f46:	e00f      	b.n	8004f68 <UART_SetConfig+0x210>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4e:	e082      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f50:	2302      	movs	r3, #2
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f56:	e07e      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5e:	e07a      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f60:	2308      	movs	r3, #8
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f66:	e076      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6e:	e072      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a35      	ldr	r2, [pc, #212]	@ (800504c <UART_SetConfig+0x2f4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d12a      	bne.n	8004fd0 <UART_SetConfig+0x278>
 8004f7a:	4b30      	ldr	r3, [pc, #192]	@ (800503c <UART_SetConfig+0x2e4>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f88:	d01a      	beq.n	8004fc0 <UART_SetConfig+0x268>
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f8e:	d81b      	bhi.n	8004fc8 <UART_SetConfig+0x270>
 8004f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f94:	d00c      	beq.n	8004fb0 <UART_SetConfig+0x258>
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f9a:	d815      	bhi.n	8004fc8 <UART_SetConfig+0x270>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <UART_SetConfig+0x250>
 8004fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa4:	d008      	beq.n	8004fb8 <UART_SetConfig+0x260>
 8004fa6:	e00f      	b.n	8004fc8 <UART_SetConfig+0x270>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e052      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb6:	e04e      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbe:	e04a      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e046      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e042      	b.n	8005056 <UART_SetConfig+0x2fe>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a17      	ldr	r2, [pc, #92]	@ (8005034 <UART_SetConfig+0x2dc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d13a      	bne.n	8005050 <UART_SetConfig+0x2f8>
 8004fda:	4b18      	ldr	r3, [pc, #96]	@ (800503c <UART_SetConfig+0x2e4>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fe8:	d01a      	beq.n	8005020 <UART_SetConfig+0x2c8>
 8004fea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fee:	d81b      	bhi.n	8005028 <UART_SetConfig+0x2d0>
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ff4:	d00c      	beq.n	8005010 <UART_SetConfig+0x2b8>
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ffa:	d815      	bhi.n	8005028 <UART_SetConfig+0x2d0>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <UART_SetConfig+0x2b0>
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005004:	d008      	beq.n	8005018 <UART_SetConfig+0x2c0>
 8005006:	e00f      	b.n	8005028 <UART_SetConfig+0x2d0>
 8005008:	2300      	movs	r3, #0
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500e:	e022      	b.n	8005056 <UART_SetConfig+0x2fe>
 8005010:	2302      	movs	r3, #2
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005016:	e01e      	b.n	8005056 <UART_SetConfig+0x2fe>
 8005018:	2304      	movs	r3, #4
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501e:	e01a      	b.n	8005056 <UART_SetConfig+0x2fe>
 8005020:	2308      	movs	r3, #8
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e016      	b.n	8005056 <UART_SetConfig+0x2fe>
 8005028:	2310      	movs	r3, #16
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e012      	b.n	8005056 <UART_SetConfig+0x2fe>
 8005030:	cfff69f3 	.word	0xcfff69f3
 8005034:	40008000 	.word	0x40008000
 8005038:	40013800 	.word	0x40013800
 800503c:	40021000 	.word	0x40021000
 8005040:	40004400 	.word	0x40004400
 8005044:	40004800 	.word	0x40004800
 8005048:	40004c00 	.word	0x40004c00
 800504c:	40005000 	.word	0x40005000
 8005050:	2310      	movs	r3, #16
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4aae      	ldr	r2, [pc, #696]	@ (8005314 <UART_SetConfig+0x5bc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	f040 8097 	bne.w	8005190 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005062:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005066:	2b08      	cmp	r3, #8
 8005068:	d823      	bhi.n	80050b2 <UART_SetConfig+0x35a>
 800506a:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <UART_SetConfig+0x318>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005095 	.word	0x08005095
 8005074:	080050b3 	.word	0x080050b3
 8005078:	0800509d 	.word	0x0800509d
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050a3 	.word	0x080050a3
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050b3 	.word	0x080050b3
 800508c:	080050b3 	.word	0x080050b3
 8005090:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7ff fad4 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800509a:	e010      	b.n	80050be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b9e      	ldr	r3, [pc, #632]	@ (8005318 <UART_SetConfig+0x5c0>)
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a0:	e00d      	b.n	80050be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7ff fa5f 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 80050a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050b0:	e005      	b.n	80050be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8130 	beq.w	8005326 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	4a94      	ldr	r2, [pc, #592]	@ (800531c <UART_SetConfig+0x5c4>)
 80050cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d305      	bcc.n	80050f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d903      	bls.n	80050fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050fc:	e113      	b.n	8005326 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	2200      	movs	r2, #0
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	60fa      	str	r2, [r7, #12]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	4a84      	ldr	r2, [pc, #528]	@ (800531c <UART_SetConfig+0x5c4>)
 800510c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005110:	b29b      	uxth	r3, r3
 8005112:	2200      	movs	r2, #0
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005120:	f7fb fa8a 	bl	8000638 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	020b      	lsls	r3, r1, #8
 8005136:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800513a:	0202      	lsls	r2, r0, #8
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	6849      	ldr	r1, [r1, #4]
 8005140:	0849      	lsrs	r1, r1, #1
 8005142:	2000      	movs	r0, #0
 8005144:	460c      	mov	r4, r1
 8005146:	4605      	mov	r5, r0
 8005148:	eb12 0804 	adds.w	r8, r2, r4
 800514c:	eb43 0905 	adc.w	r9, r3, r5
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	469a      	mov	sl, r3
 8005158:	4693      	mov	fp, r2
 800515a:	4652      	mov	r2, sl
 800515c:	465b      	mov	r3, fp
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb fa69 	bl	8000638 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4613      	mov	r3, r2
 800516c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005174:	d308      	bcc.n	8005188 <UART_SetConfig+0x430>
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800517c:	d204      	bcs.n	8005188 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	e0ce      	b.n	8005326 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800518e:	e0ca      	b.n	8005326 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005198:	d166      	bne.n	8005268 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800519a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d827      	bhi.n	80051f2 <UART_SetConfig+0x49a>
 80051a2:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <UART_SetConfig+0x450>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7ff fa38 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051d2:	e014      	b.n	80051fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7ff fa4a 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051da:	e010      	b.n	80051fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005318 <UART_SetConfig+0x5c0>)
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051e0:	e00d      	b.n	80051fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7ff f9bf 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 80051e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051e8:	e009      	b.n	80051fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051f0:	e005      	b.n	80051fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8090 	beq.w	8005326 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	4a44      	ldr	r2, [pc, #272]	@ (800531c <UART_SetConfig+0x5c4>)
 800520c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005210:	461a      	mov	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	fbb3 f3f2 	udiv	r3, r3, r2
 8005218:	005a      	lsls	r2, r3, #1
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	441a      	add	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d916      	bls.n	8005260 <UART_SetConfig+0x508>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005238:	d212      	bcs.n	8005260 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f023 030f 	bic.w	r3, r3, #15
 8005242:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	b29a      	uxth	r2, r3
 8005250:	8bfb      	ldrh	r3, [r7, #30]
 8005252:	4313      	orrs	r3, r2
 8005254:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	8bfa      	ldrh	r2, [r7, #30]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e062      	b.n	8005326 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005266:	e05e      	b.n	8005326 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005268:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800526c:	2b08      	cmp	r3, #8
 800526e:	d828      	bhi.n	80052c2 <UART_SetConfig+0x56a>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <UART_SetConfig+0x520>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052ad 	.word	0x080052ad
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052b3 	.word	0x080052b3
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7ff f9d0 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80052a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052a2:	e014      	b.n	80052ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7ff f9e2 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 80052a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005318 <UART_SetConfig+0x5c0>)
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7ff f957 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 80052b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052b8:	e009      	b.n	80052ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052c0:	e005      	b.n	80052ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052cc:	bf00      	nop
    }

    if (pclk != 0U)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d028      	beq.n	8005326 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	4a10      	ldr	r2, [pc, #64]	@ (800531c <UART_SetConfig+0x5c4>)
 80052da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052de:	461a      	mov	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	441a      	add	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d910      	bls.n	8005320 <UART_SetConfig+0x5c8>
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005304:	d20c      	bcs.n	8005320 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	b29a      	uxth	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
 8005310:	e009      	b.n	8005326 <UART_SetConfig+0x5ce>
 8005312:	bf00      	nop
 8005314:	40008000 	.word	0x40008000
 8005318:	00f42400 	.word	0x00f42400
 800531c:	08006854 	.word	0x08006854
      }
      else
      {
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2201      	movs	r2, #1
 800532a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2201      	movs	r2, #1
 8005332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005342:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005346:	4618      	mov	r0, r3
 8005348:	3730      	adds	r7, #48	@ 0x30
 800534a:	46bd      	mov	sp, r7
 800534c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01a      	beq.n	8005466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800544e:	d10a      	bne.n	8005466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b098      	sub	sp, #96	@ 0x60
 8005498:	af02      	add	r7, sp, #8
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a4:	f7fc f82c 	bl	8001500 <HAL_GetTick>
 80054a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d12f      	bne.n	8005518 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c0:	2200      	movs	r2, #0
 80054c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f88e 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d022      	beq.n	8005518 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e6      	bne.n	80054d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e063      	b.n	80055e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b04      	cmp	r3, #4
 8005524:	d149      	bne.n	80055ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005526:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552e:	2200      	movs	r2, #0
 8005530:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f857 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d03c      	beq.n	80055ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	623b      	str	r3, [r7, #32]
   return(result);
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005560:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	60fb      	str	r3, [r7, #12]
   return(result);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005592:	61fa      	str	r2, [r7, #28]
 8005594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	69b9      	ldr	r1, [r7, #24]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	617b      	str	r3, [r7, #20]
   return(result);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e012      	b.n	80055e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3758      	adds	r7, #88	@ 0x58
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f8:	e04f      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d04b      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fb ff7d 	bl	8001500 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <UART_WaitOnFlagUntilTimeout+0x30>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e04e      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d037      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b80      	cmp	r3, #128	@ 0x80
 800562e:	d034      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d031      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d110      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2208      	movs	r2, #8
 800564a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f838 	bl	80056c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2208      	movs	r2, #8
 8005656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e029      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005674:	d111      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800567e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f81e 	bl	80056c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e00f      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d0a0      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b095      	sub	sp, #84	@ 0x54
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	61fb      	str	r3, [r7, #28]
   return(result);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e3      	bne.n	80056fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d118      	bne.n	800576e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	60bb      	str	r3, [r7, #8]
   return(result);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f023 0310 	bic.w	r3, r3, #16
 8005750:	647b      	str	r3, [r7, #68]	@ 0x44
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6979      	ldr	r1, [r7, #20]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	613b      	str	r3, [r7, #16]
   return(result);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e6      	bne.n	800573c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005782:	bf00      	nop
 8005784:	3754      	adds	r7, #84	@ 0x54
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e027      	b.n	80057f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	@ 0x24
 80057b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e02d      	b.n	8005874 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2224      	movs	r2, #36	@ 0x24
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f84f 	bl	80058f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e02d      	b.n	80058f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	@ 0x24
 80058a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f811 	bl	80058f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005918:	e031      	b.n	800597e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800591a:	2308      	movs	r3, #8
 800591c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800591e:	2308      	movs	r3, #8
 8005920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	0e5b      	lsrs	r3, r3, #25
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	0f5b      	lsrs	r3, r3, #29
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	7b3a      	ldrb	r2, [r7, #12]
 8005946:	4911      	ldr	r1, [pc, #68]	@ (800598c <UARTEx_SetNbDataToProcess+0x94>)
 8005948:	5c8a      	ldrb	r2, [r1, r2]
 800594a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800594e:	7b3a      	ldrb	r2, [r7, #12]
 8005950:	490f      	ldr	r1, [pc, #60]	@ (8005990 <UARTEx_SetNbDataToProcess+0x98>)
 8005952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005954:	fb93 f3f2 	sdiv	r3, r3, r2
 8005958:	b29a      	uxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	7b7a      	ldrb	r2, [r7, #13]
 8005964:	4909      	ldr	r1, [pc, #36]	@ (800598c <UARTEx_SetNbDataToProcess+0x94>)
 8005966:	5c8a      	ldrb	r2, [r1, r2]
 8005968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800596c:	7b7a      	ldrb	r2, [r7, #13]
 800596e:	4908      	ldr	r1, [pc, #32]	@ (8005990 <UARTEx_SetNbDataToProcess+0x98>)
 8005970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005972:	fb93 f3f2 	sdiv	r3, r3, r2
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	0800686c 	.word	0x0800686c
 8005990:	08006874 	.word	0x08006874

08005994 <std>:
 8005994:	2300      	movs	r3, #0
 8005996:	b510      	push	{r4, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	e9c0 3300 	strd	r3, r3, [r0]
 800599e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059a2:	6083      	str	r3, [r0, #8]
 80059a4:	8181      	strh	r1, [r0, #12]
 80059a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80059a8:	81c2      	strh	r2, [r0, #14]
 80059aa:	6183      	str	r3, [r0, #24]
 80059ac:	4619      	mov	r1, r3
 80059ae:	2208      	movs	r2, #8
 80059b0:	305c      	adds	r0, #92	@ 0x5c
 80059b2:	f000 f906 	bl	8005bc2 <memset>
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <std+0x58>)
 80059b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <std+0x5c>)
 80059bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <std+0x60>)
 80059c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059c2:	4b0d      	ldr	r3, [pc, #52]	@ (80059f8 <std+0x64>)
 80059c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80059c6:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <std+0x68>)
 80059c8:	6224      	str	r4, [r4, #32]
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d006      	beq.n	80059dc <std+0x48>
 80059ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059d2:	4294      	cmp	r4, r2
 80059d4:	d002      	beq.n	80059dc <std+0x48>
 80059d6:	33d0      	adds	r3, #208	@ 0xd0
 80059d8:	429c      	cmp	r4, r3
 80059da:	d105      	bne.n	80059e8 <std+0x54>
 80059dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e4:	f000 b966 	b.w	8005cb4 <__retarget_lock_init_recursive>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	bf00      	nop
 80059ec:	08005b3d 	.word	0x08005b3d
 80059f0:	08005b5f 	.word	0x08005b5f
 80059f4:	08005b97 	.word	0x08005b97
 80059f8:	08005bbb 	.word	0x08005bbb
 80059fc:	200001f0 	.word	0x200001f0

08005a00 <stdio_exit_handler>:
 8005a00:	4a02      	ldr	r2, [pc, #8]	@ (8005a0c <stdio_exit_handler+0xc>)
 8005a02:	4903      	ldr	r1, [pc, #12]	@ (8005a10 <stdio_exit_handler+0x10>)
 8005a04:	4803      	ldr	r0, [pc, #12]	@ (8005a14 <stdio_exit_handler+0x14>)
 8005a06:	f000 b869 	b.w	8005adc <_fwalk_sglue>
 8005a0a:	bf00      	nop
 8005a0c:	2000000c 	.word	0x2000000c
 8005a10:	08006555 	.word	0x08006555
 8005a14:	2000001c 	.word	0x2000001c

08005a18 <cleanup_stdio>:
 8005a18:	6841      	ldr	r1, [r0, #4]
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a4c <cleanup_stdio+0x34>)
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	4604      	mov	r4, r0
 8005a22:	d001      	beq.n	8005a28 <cleanup_stdio+0x10>
 8005a24:	f000 fd96 	bl	8006554 <_fflush_r>
 8005a28:	68a1      	ldr	r1, [r4, #8]
 8005a2a:	4b09      	ldr	r3, [pc, #36]	@ (8005a50 <cleanup_stdio+0x38>)
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	d002      	beq.n	8005a36 <cleanup_stdio+0x1e>
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 fd8f 	bl	8006554 <_fflush_r>
 8005a36:	68e1      	ldr	r1, [r4, #12]
 8005a38:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <cleanup_stdio+0x3c>)
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	d004      	beq.n	8005a48 <cleanup_stdio+0x30>
 8005a3e:	4620      	mov	r0, r4
 8005a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a44:	f000 bd86 	b.w	8006554 <_fflush_r>
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200001f0 	.word	0x200001f0
 8005a50:	20000258 	.word	0x20000258
 8005a54:	200002c0 	.word	0x200002c0

08005a58 <global_stdio_init.part.0>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a88 <global_stdio_init.part.0+0x30>)
 8005a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005a8c <global_stdio_init.part.0+0x34>)
 8005a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a90 <global_stdio_init.part.0+0x38>)
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	4620      	mov	r0, r4
 8005a64:	2200      	movs	r2, #0
 8005a66:	2104      	movs	r1, #4
 8005a68:	f7ff ff94 	bl	8005994 <std>
 8005a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a70:	2201      	movs	r2, #1
 8005a72:	2109      	movs	r1, #9
 8005a74:	f7ff ff8e 	bl	8005994 <std>
 8005a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a82:	2112      	movs	r1, #18
 8005a84:	f7ff bf86 	b.w	8005994 <std>
 8005a88:	20000328 	.word	0x20000328
 8005a8c:	200001f0 	.word	0x200001f0
 8005a90:	08005a01 	.word	0x08005a01

08005a94 <__sfp_lock_acquire>:
 8005a94:	4801      	ldr	r0, [pc, #4]	@ (8005a9c <__sfp_lock_acquire+0x8>)
 8005a96:	f000 b90e 	b.w	8005cb6 <__retarget_lock_acquire_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20000331 	.word	0x20000331

08005aa0 <__sfp_lock_release>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	@ (8005aa8 <__sfp_lock_release+0x8>)
 8005aa2:	f000 b909 	b.w	8005cb8 <__retarget_lock_release_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000331 	.word	0x20000331

08005aac <__sinit>:
 8005aac:	b510      	push	{r4, lr}
 8005aae:	4604      	mov	r4, r0
 8005ab0:	f7ff fff0 	bl	8005a94 <__sfp_lock_acquire>
 8005ab4:	6a23      	ldr	r3, [r4, #32]
 8005ab6:	b11b      	cbz	r3, 8005ac0 <__sinit+0x14>
 8005ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005abc:	f7ff bff0 	b.w	8005aa0 <__sfp_lock_release>
 8005ac0:	4b04      	ldr	r3, [pc, #16]	@ (8005ad4 <__sinit+0x28>)
 8005ac2:	6223      	str	r3, [r4, #32]
 8005ac4:	4b04      	ldr	r3, [pc, #16]	@ (8005ad8 <__sinit+0x2c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f5      	bne.n	8005ab8 <__sinit+0xc>
 8005acc:	f7ff ffc4 	bl	8005a58 <global_stdio_init.part.0>
 8005ad0:	e7f2      	b.n	8005ab8 <__sinit+0xc>
 8005ad2:	bf00      	nop
 8005ad4:	08005a19 	.word	0x08005a19
 8005ad8:	20000328 	.word	0x20000328

08005adc <_fwalk_sglue>:
 8005adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	4688      	mov	r8, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aec:	f1b9 0901 	subs.w	r9, r9, #1
 8005af0:	d505      	bpl.n	8005afe <_fwalk_sglue+0x22>
 8005af2:	6824      	ldr	r4, [r4, #0]
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	d1f7      	bne.n	8005ae8 <_fwalk_sglue+0xc>
 8005af8:	4630      	mov	r0, r6
 8005afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d907      	bls.n	8005b14 <_fwalk_sglue+0x38>
 8005b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	d003      	beq.n	8005b14 <_fwalk_sglue+0x38>
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c0      	blx	r8
 8005b12:	4306      	orrs	r6, r0
 8005b14:	3568      	adds	r5, #104	@ 0x68
 8005b16:	e7e9      	b.n	8005aec <_fwalk_sglue+0x10>

08005b18 <iprintf>:
 8005b18:	b40f      	push	{r0, r1, r2, r3}
 8005b1a:	b507      	push	{r0, r1, r2, lr}
 8005b1c:	4906      	ldr	r1, [pc, #24]	@ (8005b38 <iprintf+0x20>)
 8005b1e:	ab04      	add	r3, sp, #16
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b26:	6881      	ldr	r1, [r0, #8]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f000 f9e9 	bl	8005f00 <_vfiprintf_r>
 8005b2e:	b003      	add	sp, #12
 8005b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b34:	b004      	add	sp, #16
 8005b36:	4770      	bx	lr
 8005b38:	20000018 	.word	0x20000018

08005b3c <__sread>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b44:	f000 f868 	bl	8005c18 <_read_r>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	bfab      	itete	ge
 8005b4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b50:	181b      	addge	r3, r3, r0
 8005b52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b56:	bfac      	ite	ge
 8005b58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b5a:	81a3      	strhlt	r3, [r4, #12]
 8005b5c:	bd10      	pop	{r4, pc}

08005b5e <__swrite>:
 8005b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b62:	461f      	mov	r7, r3
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	05db      	lsls	r3, r3, #23
 8005b68:	4605      	mov	r5, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	d505      	bpl.n	8005b7c <__swrite+0x1e>
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	2302      	movs	r3, #2
 8005b76:	2200      	movs	r2, #0
 8005b78:	f000 f83c 	bl	8005bf4 <_lseek_r>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	4632      	mov	r2, r6
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	f000 b853 	b.w	8005c3c <_write_r>

08005b96 <__sseek>:
 8005b96:	b510      	push	{r4, lr}
 8005b98:	460c      	mov	r4, r1
 8005b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9e:	f000 f829 	bl	8005bf4 <_lseek_r>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	bf15      	itete	ne
 8005ba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005baa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bb2:	81a3      	strheq	r3, [r4, #12]
 8005bb4:	bf18      	it	ne
 8005bb6:	81a3      	strhne	r3, [r4, #12]
 8005bb8:	bd10      	pop	{r4, pc}

08005bba <__sclose>:
 8005bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbe:	f000 b809 	b.w	8005bd4 <_close_r>

08005bc2 <memset>:
 8005bc2:	4402      	add	r2, r0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d100      	bne.n	8005bcc <memset+0xa>
 8005bca:	4770      	bx	lr
 8005bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd0:	e7f9      	b.n	8005bc6 <memset+0x4>
	...

08005bd4 <_close_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d06      	ldr	r5, [pc, #24]	@ (8005bf0 <_close_r+0x1c>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fb fae1 	bl	80011a6 <_close>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_close_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_close_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	2000032c 	.word	0x2000032c

08005bf4 <_lseek_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	@ (8005c14 <_lseek_r+0x20>)
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f7fb faf6 	bl	80011f4 <_lseek>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_lseek_r+0x1e>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_lseek_r+0x1e>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	2000032c 	.word	0x2000032c

08005c18 <_read_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d07      	ldr	r5, [pc, #28]	@ (8005c38 <_read_r+0x20>)
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	4608      	mov	r0, r1
 8005c20:	4611      	mov	r1, r2
 8005c22:	2200      	movs	r2, #0
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f7fb fa84 	bl	8001134 <_read>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_read_r+0x1e>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_read_r+0x1e>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	2000032c 	.word	0x2000032c

08005c3c <_write_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d07      	ldr	r5, [pc, #28]	@ (8005c5c <_write_r+0x20>)
 8005c40:	4604      	mov	r4, r0
 8005c42:	4608      	mov	r0, r1
 8005c44:	4611      	mov	r1, r2
 8005c46:	2200      	movs	r2, #0
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f7fb fa8f 	bl	800116e <_write>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_write_r+0x1e>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_write_r+0x1e>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	2000032c 	.word	0x2000032c

08005c60 <__errno>:
 8005c60:	4b01      	ldr	r3, [pc, #4]	@ (8005c68 <__errno+0x8>)
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000018 	.word	0x20000018

08005c6c <__libc_init_array>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ca4 <__libc_init_array+0x38>)
 8005c70:	4c0d      	ldr	r4, [pc, #52]	@ (8005ca8 <__libc_init_array+0x3c>)
 8005c72:	1b64      	subs	r4, r4, r5
 8005c74:	10a4      	asrs	r4, r4, #2
 8005c76:	2600      	movs	r6, #0
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	d109      	bne.n	8005c90 <__libc_init_array+0x24>
 8005c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005cac <__libc_init_array+0x40>)
 8005c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005cb0 <__libc_init_array+0x44>)
 8005c80:	f000 fdb8 	bl	80067f4 <_init>
 8005c84:	1b64      	subs	r4, r4, r5
 8005c86:	10a4      	asrs	r4, r4, #2
 8005c88:	2600      	movs	r6, #0
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	d105      	bne.n	8005c9a <__libc_init_array+0x2e>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c94:	4798      	blx	r3
 8005c96:	3601      	adds	r6, #1
 8005c98:	e7ee      	b.n	8005c78 <__libc_init_array+0xc>
 8005c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9e:	4798      	blx	r3
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	e7f2      	b.n	8005c8a <__libc_init_array+0x1e>
 8005ca4:	080068b8 	.word	0x080068b8
 8005ca8:	080068b8 	.word	0x080068b8
 8005cac:	080068b8 	.word	0x080068b8
 8005cb0:	080068bc 	.word	0x080068bc

08005cb4 <__retarget_lock_init_recursive>:
 8005cb4:	4770      	bx	lr

08005cb6 <__retarget_lock_acquire_recursive>:
 8005cb6:	4770      	bx	lr

08005cb8 <__retarget_lock_release_recursive>:
 8005cb8:	4770      	bx	lr
	...

08005cbc <_free_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d041      	beq.n	8005d48 <_free_r+0x8c>
 8005cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc8:	1f0c      	subs	r4, r1, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bfb8      	it	lt
 8005cce:	18e4      	addlt	r4, r4, r3
 8005cd0:	f000 f8e0 	bl	8005e94 <__malloc_lock>
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <_free_r+0x90>)
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	b933      	cbnz	r3, 8005ce8 <_free_r+0x2c>
 8005cda:	6063      	str	r3, [r4, #4]
 8005cdc:	6014      	str	r4, [r2, #0]
 8005cde:	4628      	mov	r0, r5
 8005ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ce4:	f000 b8dc 	b.w	8005ea0 <__malloc_unlock>
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	d908      	bls.n	8005cfe <_free_r+0x42>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	1821      	adds	r1, r4, r0
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	bf01      	itttt	eq
 8005cf4:	6819      	ldreq	r1, [r3, #0]
 8005cf6:	685b      	ldreq	r3, [r3, #4]
 8005cf8:	1809      	addeq	r1, r1, r0
 8005cfa:	6021      	streq	r1, [r4, #0]
 8005cfc:	e7ed      	b.n	8005cda <_free_r+0x1e>
 8005cfe:	461a      	mov	r2, r3
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	b10b      	cbz	r3, 8005d08 <_free_r+0x4c>
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	d9fa      	bls.n	8005cfe <_free_r+0x42>
 8005d08:	6811      	ldr	r1, [r2, #0]
 8005d0a:	1850      	adds	r0, r2, r1
 8005d0c:	42a0      	cmp	r0, r4
 8005d0e:	d10b      	bne.n	8005d28 <_free_r+0x6c>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	4401      	add	r1, r0
 8005d14:	1850      	adds	r0, r2, r1
 8005d16:	4283      	cmp	r3, r0
 8005d18:	6011      	str	r1, [r2, #0]
 8005d1a:	d1e0      	bne.n	8005cde <_free_r+0x22>
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	6053      	str	r3, [r2, #4]
 8005d22:	4408      	add	r0, r1
 8005d24:	6010      	str	r0, [r2, #0]
 8005d26:	e7da      	b.n	8005cde <_free_r+0x22>
 8005d28:	d902      	bls.n	8005d30 <_free_r+0x74>
 8005d2a:	230c      	movs	r3, #12
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	e7d6      	b.n	8005cde <_free_r+0x22>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	1821      	adds	r1, r4, r0
 8005d34:	428b      	cmp	r3, r1
 8005d36:	bf04      	itt	eq
 8005d38:	6819      	ldreq	r1, [r3, #0]
 8005d3a:	685b      	ldreq	r3, [r3, #4]
 8005d3c:	6063      	str	r3, [r4, #4]
 8005d3e:	bf04      	itt	eq
 8005d40:	1809      	addeq	r1, r1, r0
 8005d42:	6021      	streq	r1, [r4, #0]
 8005d44:	6054      	str	r4, [r2, #4]
 8005d46:	e7ca      	b.n	8005cde <_free_r+0x22>
 8005d48:	bd38      	pop	{r3, r4, r5, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000338 	.word	0x20000338

08005d50 <sbrk_aligned>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4e0f      	ldr	r6, [pc, #60]	@ (8005d90 <sbrk_aligned+0x40>)
 8005d54:	460c      	mov	r4, r1
 8005d56:	6831      	ldr	r1, [r6, #0]
 8005d58:	4605      	mov	r5, r0
 8005d5a:	b911      	cbnz	r1, 8005d62 <sbrk_aligned+0x12>
 8005d5c:	f000 fcb6 	bl	80066cc <_sbrk_r>
 8005d60:	6030      	str	r0, [r6, #0]
 8005d62:	4621      	mov	r1, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 fcb1 	bl	80066cc <_sbrk_r>
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	d103      	bne.n	8005d76 <sbrk_aligned+0x26>
 8005d6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d72:	4620      	mov	r0, r4
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
 8005d76:	1cc4      	adds	r4, r0, #3
 8005d78:	f024 0403 	bic.w	r4, r4, #3
 8005d7c:	42a0      	cmp	r0, r4
 8005d7e:	d0f8      	beq.n	8005d72 <sbrk_aligned+0x22>
 8005d80:	1a21      	subs	r1, r4, r0
 8005d82:	4628      	mov	r0, r5
 8005d84:	f000 fca2 	bl	80066cc <_sbrk_r>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d1f2      	bne.n	8005d72 <sbrk_aligned+0x22>
 8005d8c:	e7ef      	b.n	8005d6e <sbrk_aligned+0x1e>
 8005d8e:	bf00      	nop
 8005d90:	20000334 	.word	0x20000334

08005d94 <_malloc_r>:
 8005d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d98:	1ccd      	adds	r5, r1, #3
 8005d9a:	f025 0503 	bic.w	r5, r5, #3
 8005d9e:	3508      	adds	r5, #8
 8005da0:	2d0c      	cmp	r5, #12
 8005da2:	bf38      	it	cc
 8005da4:	250c      	movcc	r5, #12
 8005da6:	2d00      	cmp	r5, #0
 8005da8:	4606      	mov	r6, r0
 8005daa:	db01      	blt.n	8005db0 <_malloc_r+0x1c>
 8005dac:	42a9      	cmp	r1, r5
 8005dae:	d904      	bls.n	8005dba <_malloc_r+0x26>
 8005db0:	230c      	movs	r3, #12
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	2000      	movs	r0, #0
 8005db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e90 <_malloc_r+0xfc>
 8005dbe:	f000 f869 	bl	8005e94 <__malloc_lock>
 8005dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	bb44      	cbnz	r4, 8005e1c <_malloc_r+0x88>
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff ffbf 	bl	8005d50 <sbrk_aligned>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	d158      	bne.n	8005e8a <_malloc_r+0xf6>
 8005dd8:	f8d8 4000 	ldr.w	r4, [r8]
 8005ddc:	4627      	mov	r7, r4
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d143      	bne.n	8005e6a <_malloc_r+0xd6>
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d04b      	beq.n	8005e7e <_malloc_r+0xea>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4639      	mov	r1, r7
 8005dea:	4630      	mov	r0, r6
 8005dec:	eb04 0903 	add.w	r9, r4, r3
 8005df0:	f000 fc6c 	bl	80066cc <_sbrk_r>
 8005df4:	4581      	cmp	r9, r0
 8005df6:	d142      	bne.n	8005e7e <_malloc_r+0xea>
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	1a6d      	subs	r5, r5, r1
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ffa6 	bl	8005d50 <sbrk_aligned>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d03a      	beq.n	8005e7e <_malloc_r+0xea>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	442b      	add	r3, r5
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	bb62      	cbnz	r2, 8005e70 <_malloc_r+0xdc>
 8005e16:	f8c8 7000 	str.w	r7, [r8]
 8005e1a:	e00f      	b.n	8005e3c <_malloc_r+0xa8>
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	1b52      	subs	r2, r2, r5
 8005e20:	d420      	bmi.n	8005e64 <_malloc_r+0xd0>
 8005e22:	2a0b      	cmp	r2, #11
 8005e24:	d917      	bls.n	8005e56 <_malloc_r+0xc2>
 8005e26:	1961      	adds	r1, r4, r5
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	6025      	str	r5, [r4, #0]
 8005e2c:	bf18      	it	ne
 8005e2e:	6059      	strne	r1, [r3, #4]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	bf08      	it	eq
 8005e34:	f8c8 1000 	streq.w	r1, [r8]
 8005e38:	5162      	str	r2, [r4, r5]
 8005e3a:	604b      	str	r3, [r1, #4]
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f82f 	bl	8005ea0 <__malloc_unlock>
 8005e42:	f104 000b 	add.w	r0, r4, #11
 8005e46:	1d23      	adds	r3, r4, #4
 8005e48:	f020 0007 	bic.w	r0, r0, #7
 8005e4c:	1ac2      	subs	r2, r0, r3
 8005e4e:	bf1c      	itt	ne
 8005e50:	1a1b      	subne	r3, r3, r0
 8005e52:	50a3      	strne	r3, [r4, r2]
 8005e54:	e7af      	b.n	8005db6 <_malloc_r+0x22>
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	bf0c      	ite	eq
 8005e5c:	f8c8 2000 	streq.w	r2, [r8]
 8005e60:	605a      	strne	r2, [r3, #4]
 8005e62:	e7eb      	b.n	8005e3c <_malloc_r+0xa8>
 8005e64:	4623      	mov	r3, r4
 8005e66:	6864      	ldr	r4, [r4, #4]
 8005e68:	e7ae      	b.n	8005dc8 <_malloc_r+0x34>
 8005e6a:	463c      	mov	r4, r7
 8005e6c:	687f      	ldr	r7, [r7, #4]
 8005e6e:	e7b6      	b.n	8005dde <_malloc_r+0x4a>
 8005e70:	461a      	mov	r2, r3
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d1fb      	bne.n	8005e70 <_malloc_r+0xdc>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6053      	str	r3, [r2, #4]
 8005e7c:	e7de      	b.n	8005e3c <_malloc_r+0xa8>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	4630      	mov	r0, r6
 8005e84:	f000 f80c 	bl	8005ea0 <__malloc_unlock>
 8005e88:	e794      	b.n	8005db4 <_malloc_r+0x20>
 8005e8a:	6005      	str	r5, [r0, #0]
 8005e8c:	e7d6      	b.n	8005e3c <_malloc_r+0xa8>
 8005e8e:	bf00      	nop
 8005e90:	20000338 	.word	0x20000338

08005e94 <__malloc_lock>:
 8005e94:	4801      	ldr	r0, [pc, #4]	@ (8005e9c <__malloc_lock+0x8>)
 8005e96:	f7ff bf0e 	b.w	8005cb6 <__retarget_lock_acquire_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	20000330 	.word	0x20000330

08005ea0 <__malloc_unlock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	@ (8005ea8 <__malloc_unlock+0x8>)
 8005ea2:	f7ff bf09 	b.w	8005cb8 <__retarget_lock_release_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	20000330 	.word	0x20000330

08005eac <__sfputc_r>:
 8005eac:	6893      	ldr	r3, [r2, #8]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	b410      	push	{r4}
 8005eb4:	6093      	str	r3, [r2, #8]
 8005eb6:	da08      	bge.n	8005eca <__sfputc_r+0x1e>
 8005eb8:	6994      	ldr	r4, [r2, #24]
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	db01      	blt.n	8005ec2 <__sfputc_r+0x16>
 8005ebe:	290a      	cmp	r1, #10
 8005ec0:	d103      	bne.n	8005eca <__sfputc_r+0x1e>
 8005ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec6:	f000 bb6d 	b.w	80065a4 <__swbuf_r>
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	1c58      	adds	r0, r3, #1
 8005ece:	6010      	str	r0, [r2, #0]
 8005ed0:	7019      	strb	r1, [r3, #0]
 8005ed2:	4608      	mov	r0, r1
 8005ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <__sfputs_r>:
 8005eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	18d5      	adds	r5, r2, r3
 8005ee4:	42ac      	cmp	r4, r5
 8005ee6:	d101      	bne.n	8005eec <__sfputs_r+0x12>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e007      	b.n	8005efc <__sfputs_r+0x22>
 8005eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef0:	463a      	mov	r2, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ffda 	bl	8005eac <__sfputc_r>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d1f3      	bne.n	8005ee4 <__sfputs_r+0xa>
 8005efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f00 <_vfiprintf_r>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	460d      	mov	r5, r1
 8005f06:	b09d      	sub	sp, #116	@ 0x74
 8005f08:	4614      	mov	r4, r2
 8005f0a:	4698      	mov	r8, r3
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	b118      	cbz	r0, 8005f18 <_vfiprintf_r+0x18>
 8005f10:	6a03      	ldr	r3, [r0, #32]
 8005f12:	b90b      	cbnz	r3, 8005f18 <_vfiprintf_r+0x18>
 8005f14:	f7ff fdca 	bl	8005aac <__sinit>
 8005f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f1a:	07d9      	lsls	r1, r3, #31
 8005f1c:	d405      	bmi.n	8005f2a <_vfiprintf_r+0x2a>
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	059a      	lsls	r2, r3, #22
 8005f22:	d402      	bmi.n	8005f2a <_vfiprintf_r+0x2a>
 8005f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f26:	f7ff fec6 	bl	8005cb6 <__retarget_lock_acquire_recursive>
 8005f2a:	89ab      	ldrh	r3, [r5, #12]
 8005f2c:	071b      	lsls	r3, r3, #28
 8005f2e:	d501      	bpl.n	8005f34 <_vfiprintf_r+0x34>
 8005f30:	692b      	ldr	r3, [r5, #16]
 8005f32:	b99b      	cbnz	r3, 8005f5c <_vfiprintf_r+0x5c>
 8005f34:	4629      	mov	r1, r5
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 fb72 	bl	8006620 <__swsetup_r>
 8005f3c:	b170      	cbz	r0, 8005f5c <_vfiprintf_r+0x5c>
 8005f3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f40:	07dc      	lsls	r4, r3, #31
 8005f42:	d504      	bpl.n	8005f4e <_vfiprintf_r+0x4e>
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	b01d      	add	sp, #116	@ 0x74
 8005f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	0598      	lsls	r0, r3, #22
 8005f52:	d4f7      	bmi.n	8005f44 <_vfiprintf_r+0x44>
 8005f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f56:	f7ff feaf 	bl	8005cb8 <__retarget_lock_release_recursive>
 8005f5a:	e7f3      	b.n	8005f44 <_vfiprintf_r+0x44>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f60:	2320      	movs	r3, #32
 8005f62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f6a:	2330      	movs	r3, #48	@ 0x30
 8005f6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800611c <_vfiprintf_r+0x21c>
 8005f70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f74:	f04f 0901 	mov.w	r9, #1
 8005f78:	4623      	mov	r3, r4
 8005f7a:	469a      	mov	sl, r3
 8005f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f80:	b10a      	cbz	r2, 8005f86 <_vfiprintf_r+0x86>
 8005f82:	2a25      	cmp	r2, #37	@ 0x25
 8005f84:	d1f9      	bne.n	8005f7a <_vfiprintf_r+0x7a>
 8005f86:	ebba 0b04 	subs.w	fp, sl, r4
 8005f8a:	d00b      	beq.n	8005fa4 <_vfiprintf_r+0xa4>
 8005f8c:	465b      	mov	r3, fp
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff ffa1 	bl	8005eda <__sfputs_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f000 80a7 	beq.w	80060ec <_vfiprintf_r+0x1ec>
 8005f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fa0:	445a      	add	r2, fp
 8005fa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 809f 	beq.w	80060ec <_vfiprintf_r+0x1ec>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fb8:	f10a 0a01 	add.w	sl, sl, #1
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fc6:	4654      	mov	r4, sl
 8005fc8:	2205      	movs	r2, #5
 8005fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fce:	4853      	ldr	r0, [pc, #332]	@ (800611c <_vfiprintf_r+0x21c>)
 8005fd0:	f7fa f926 	bl	8000220 <memchr>
 8005fd4:	9a04      	ldr	r2, [sp, #16]
 8005fd6:	b9d8      	cbnz	r0, 8006010 <_vfiprintf_r+0x110>
 8005fd8:	06d1      	lsls	r1, r2, #27
 8005fda:	bf44      	itt	mi
 8005fdc:	2320      	movmi	r3, #32
 8005fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fe2:	0713      	lsls	r3, r2, #28
 8005fe4:	bf44      	itt	mi
 8005fe6:	232b      	movmi	r3, #43	@ 0x2b
 8005fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ff2:	d015      	beq.n	8006020 <_vfiprintf_r+0x120>
 8005ff4:	9a07      	ldr	r2, [sp, #28]
 8005ff6:	4654      	mov	r4, sl
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f04f 0c0a 	mov.w	ip, #10
 8005ffe:	4621      	mov	r1, r4
 8006000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006004:	3b30      	subs	r3, #48	@ 0x30
 8006006:	2b09      	cmp	r3, #9
 8006008:	d94b      	bls.n	80060a2 <_vfiprintf_r+0x1a2>
 800600a:	b1b0      	cbz	r0, 800603a <_vfiprintf_r+0x13a>
 800600c:	9207      	str	r2, [sp, #28]
 800600e:	e014      	b.n	800603a <_vfiprintf_r+0x13a>
 8006010:	eba0 0308 	sub.w	r3, r0, r8
 8006014:	fa09 f303 	lsl.w	r3, r9, r3
 8006018:	4313      	orrs	r3, r2
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	46a2      	mov	sl, r4
 800601e:	e7d2      	b.n	8005fc6 <_vfiprintf_r+0xc6>
 8006020:	9b03      	ldr	r3, [sp, #12]
 8006022:	1d19      	adds	r1, r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	9103      	str	r1, [sp, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfbb      	ittet	lt
 800602c:	425b      	neglt	r3, r3
 800602e:	f042 0202 	orrlt.w	r2, r2, #2
 8006032:	9307      	strge	r3, [sp, #28]
 8006034:	9307      	strlt	r3, [sp, #28]
 8006036:	bfb8      	it	lt
 8006038:	9204      	strlt	r2, [sp, #16]
 800603a:	7823      	ldrb	r3, [r4, #0]
 800603c:	2b2e      	cmp	r3, #46	@ 0x2e
 800603e:	d10a      	bne.n	8006056 <_vfiprintf_r+0x156>
 8006040:	7863      	ldrb	r3, [r4, #1]
 8006042:	2b2a      	cmp	r3, #42	@ 0x2a
 8006044:	d132      	bne.n	80060ac <_vfiprintf_r+0x1ac>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	1d1a      	adds	r2, r3, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	9203      	str	r2, [sp, #12]
 800604e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006052:	3402      	adds	r4, #2
 8006054:	9305      	str	r3, [sp, #20]
 8006056:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800612c <_vfiprintf_r+0x22c>
 800605a:	7821      	ldrb	r1, [r4, #0]
 800605c:	2203      	movs	r2, #3
 800605e:	4650      	mov	r0, sl
 8006060:	f7fa f8de 	bl	8000220 <memchr>
 8006064:	b138      	cbz	r0, 8006076 <_vfiprintf_r+0x176>
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	eba0 000a 	sub.w	r0, r0, sl
 800606c:	2240      	movs	r2, #64	@ 0x40
 800606e:	4082      	lsls	r2, r0
 8006070:	4313      	orrs	r3, r2
 8006072:	3401      	adds	r4, #1
 8006074:	9304      	str	r3, [sp, #16]
 8006076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607a:	4829      	ldr	r0, [pc, #164]	@ (8006120 <_vfiprintf_r+0x220>)
 800607c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006080:	2206      	movs	r2, #6
 8006082:	f7fa f8cd 	bl	8000220 <memchr>
 8006086:	2800      	cmp	r0, #0
 8006088:	d03f      	beq.n	800610a <_vfiprintf_r+0x20a>
 800608a:	4b26      	ldr	r3, [pc, #152]	@ (8006124 <_vfiprintf_r+0x224>)
 800608c:	bb1b      	cbnz	r3, 80060d6 <_vfiprintf_r+0x1d6>
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	3307      	adds	r3, #7
 8006092:	f023 0307 	bic.w	r3, r3, #7
 8006096:	3308      	adds	r3, #8
 8006098:	9303      	str	r3, [sp, #12]
 800609a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609c:	443b      	add	r3, r7
 800609e:	9309      	str	r3, [sp, #36]	@ 0x24
 80060a0:	e76a      	b.n	8005f78 <_vfiprintf_r+0x78>
 80060a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060a6:	460c      	mov	r4, r1
 80060a8:	2001      	movs	r0, #1
 80060aa:	e7a8      	b.n	8005ffe <_vfiprintf_r+0xfe>
 80060ac:	2300      	movs	r3, #0
 80060ae:	3401      	adds	r4, #1
 80060b0:	9305      	str	r3, [sp, #20]
 80060b2:	4619      	mov	r1, r3
 80060b4:	f04f 0c0a 	mov.w	ip, #10
 80060b8:	4620      	mov	r0, r4
 80060ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060be:	3a30      	subs	r2, #48	@ 0x30
 80060c0:	2a09      	cmp	r2, #9
 80060c2:	d903      	bls.n	80060cc <_vfiprintf_r+0x1cc>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0c6      	beq.n	8006056 <_vfiprintf_r+0x156>
 80060c8:	9105      	str	r1, [sp, #20]
 80060ca:	e7c4      	b.n	8006056 <_vfiprintf_r+0x156>
 80060cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80060d0:	4604      	mov	r4, r0
 80060d2:	2301      	movs	r3, #1
 80060d4:	e7f0      	b.n	80060b8 <_vfiprintf_r+0x1b8>
 80060d6:	ab03      	add	r3, sp, #12
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	462a      	mov	r2, r5
 80060dc:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <_vfiprintf_r+0x228>)
 80060de:	a904      	add	r1, sp, #16
 80060e0:	4630      	mov	r0, r6
 80060e2:	f3af 8000 	nop.w
 80060e6:	4607      	mov	r7, r0
 80060e8:	1c78      	adds	r0, r7, #1
 80060ea:	d1d6      	bne.n	800609a <_vfiprintf_r+0x19a>
 80060ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060ee:	07d9      	lsls	r1, r3, #31
 80060f0:	d405      	bmi.n	80060fe <_vfiprintf_r+0x1fe>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	059a      	lsls	r2, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_vfiprintf_r+0x1fe>
 80060f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060fa:	f7ff fddd 	bl	8005cb8 <__retarget_lock_release_recursive>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	065b      	lsls	r3, r3, #25
 8006102:	f53f af1f 	bmi.w	8005f44 <_vfiprintf_r+0x44>
 8006106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006108:	e71e      	b.n	8005f48 <_vfiprintf_r+0x48>
 800610a:	ab03      	add	r3, sp, #12
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	462a      	mov	r2, r5
 8006110:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <_vfiprintf_r+0x228>)
 8006112:	a904      	add	r1, sp, #16
 8006114:	4630      	mov	r0, r6
 8006116:	f000 f879 	bl	800620c <_printf_i>
 800611a:	e7e4      	b.n	80060e6 <_vfiprintf_r+0x1e6>
 800611c:	0800687c 	.word	0x0800687c
 8006120:	08006886 	.word	0x08006886
 8006124:	00000000 	.word	0x00000000
 8006128:	08005edb 	.word	0x08005edb
 800612c:	08006882 	.word	0x08006882

08006130 <_printf_common>:
 8006130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	4616      	mov	r6, r2
 8006136:	4698      	mov	r8, r3
 8006138:	688a      	ldr	r2, [r1, #8]
 800613a:	690b      	ldr	r3, [r1, #16]
 800613c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006140:	4293      	cmp	r3, r2
 8006142:	bfb8      	it	lt
 8006144:	4613      	movlt	r3, r2
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800614c:	4607      	mov	r7, r0
 800614e:	460c      	mov	r4, r1
 8006150:	b10a      	cbz	r2, 8006156 <_printf_common+0x26>
 8006152:	3301      	adds	r3, #1
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	0699      	lsls	r1, r3, #26
 800615a:	bf42      	ittt	mi
 800615c:	6833      	ldrmi	r3, [r6, #0]
 800615e:	3302      	addmi	r3, #2
 8006160:	6033      	strmi	r3, [r6, #0]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	f015 0506 	ands.w	r5, r5, #6
 8006168:	d106      	bne.n	8006178 <_printf_common+0x48>
 800616a:	f104 0a19 	add.w	sl, r4, #25
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	6832      	ldr	r2, [r6, #0]
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	42ab      	cmp	r3, r5
 8006176:	dc26      	bgt.n	80061c6 <_printf_common+0x96>
 8006178:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	3b00      	subs	r3, #0
 8006180:	bf18      	it	ne
 8006182:	2301      	movne	r3, #1
 8006184:	0692      	lsls	r2, r2, #26
 8006186:	d42b      	bmi.n	80061e0 <_printf_common+0xb0>
 8006188:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800618c:	4641      	mov	r1, r8
 800618e:	4638      	mov	r0, r7
 8006190:	47c8      	blx	r9
 8006192:	3001      	adds	r0, #1
 8006194:	d01e      	beq.n	80061d4 <_printf_common+0xa4>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	f003 0306 	and.w	r3, r3, #6
 800619e:	2b04      	cmp	r3, #4
 80061a0:	bf02      	ittt	eq
 80061a2:	68e5      	ldreq	r5, [r4, #12]
 80061a4:	6833      	ldreq	r3, [r6, #0]
 80061a6:	1aed      	subeq	r5, r5, r3
 80061a8:	68a3      	ldr	r3, [r4, #8]
 80061aa:	bf0c      	ite	eq
 80061ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b0:	2500      	movne	r5, #0
 80061b2:	4293      	cmp	r3, r2
 80061b4:	bfc4      	itt	gt
 80061b6:	1a9b      	subgt	r3, r3, r2
 80061b8:	18ed      	addgt	r5, r5, r3
 80061ba:	2600      	movs	r6, #0
 80061bc:	341a      	adds	r4, #26
 80061be:	42b5      	cmp	r5, r6
 80061c0:	d11a      	bne.n	80061f8 <_printf_common+0xc8>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e008      	b.n	80061d8 <_printf_common+0xa8>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4652      	mov	r2, sl
 80061ca:	4641      	mov	r1, r8
 80061cc:	4638      	mov	r0, r7
 80061ce:	47c8      	blx	r9
 80061d0:	3001      	adds	r0, #1
 80061d2:	d103      	bne.n	80061dc <_printf_common+0xac>
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	3501      	adds	r5, #1
 80061de:	e7c6      	b.n	800616e <_printf_common+0x3e>
 80061e0:	18e1      	adds	r1, r4, r3
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	2030      	movs	r0, #48	@ 0x30
 80061e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ea:	4422      	add	r2, r4
 80061ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061f4:	3302      	adds	r3, #2
 80061f6:	e7c7      	b.n	8006188 <_printf_common+0x58>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4622      	mov	r2, r4
 80061fc:	4641      	mov	r1, r8
 80061fe:	4638      	mov	r0, r7
 8006200:	47c8      	blx	r9
 8006202:	3001      	adds	r0, #1
 8006204:	d0e6      	beq.n	80061d4 <_printf_common+0xa4>
 8006206:	3601      	adds	r6, #1
 8006208:	e7d9      	b.n	80061be <_printf_common+0x8e>
	...

0800620c <_printf_i>:
 800620c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	7e0f      	ldrb	r7, [r1, #24]
 8006212:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006214:	2f78      	cmp	r7, #120	@ 0x78
 8006216:	4691      	mov	r9, r2
 8006218:	4680      	mov	r8, r0
 800621a:	460c      	mov	r4, r1
 800621c:	469a      	mov	sl, r3
 800621e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006222:	d807      	bhi.n	8006234 <_printf_i+0x28>
 8006224:	2f62      	cmp	r7, #98	@ 0x62
 8006226:	d80a      	bhi.n	800623e <_printf_i+0x32>
 8006228:	2f00      	cmp	r7, #0
 800622a:	f000 80d2 	beq.w	80063d2 <_printf_i+0x1c6>
 800622e:	2f58      	cmp	r7, #88	@ 0x58
 8006230:	f000 80b9 	beq.w	80063a6 <_printf_i+0x19a>
 8006234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006238:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800623c:	e03a      	b.n	80062b4 <_printf_i+0xa8>
 800623e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006242:	2b15      	cmp	r3, #21
 8006244:	d8f6      	bhi.n	8006234 <_printf_i+0x28>
 8006246:	a101      	add	r1, pc, #4	@ (adr r1, 800624c <_printf_i+0x40>)
 8006248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800624c:	080062a5 	.word	0x080062a5
 8006250:	080062b9 	.word	0x080062b9
 8006254:	08006235 	.word	0x08006235
 8006258:	08006235 	.word	0x08006235
 800625c:	08006235 	.word	0x08006235
 8006260:	08006235 	.word	0x08006235
 8006264:	080062b9 	.word	0x080062b9
 8006268:	08006235 	.word	0x08006235
 800626c:	08006235 	.word	0x08006235
 8006270:	08006235 	.word	0x08006235
 8006274:	08006235 	.word	0x08006235
 8006278:	080063b9 	.word	0x080063b9
 800627c:	080062e3 	.word	0x080062e3
 8006280:	08006373 	.word	0x08006373
 8006284:	08006235 	.word	0x08006235
 8006288:	08006235 	.word	0x08006235
 800628c:	080063db 	.word	0x080063db
 8006290:	08006235 	.word	0x08006235
 8006294:	080062e3 	.word	0x080062e3
 8006298:	08006235 	.word	0x08006235
 800629c:	08006235 	.word	0x08006235
 80062a0:	0800637b 	.word	0x0800637b
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	1d1a      	adds	r2, r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6032      	str	r2, [r6, #0]
 80062ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062b4:	2301      	movs	r3, #1
 80062b6:	e09d      	b.n	80063f4 <_printf_i+0x1e8>
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	6031      	str	r1, [r6, #0]
 80062c0:	0606      	lsls	r6, r0, #24
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0xbc>
 80062c4:	681d      	ldr	r5, [r3, #0]
 80062c6:	e003      	b.n	80062d0 <_printf_i+0xc4>
 80062c8:	0645      	lsls	r5, r0, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0xb8>
 80062cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	da03      	bge.n	80062dc <_printf_i+0xd0>
 80062d4:	232d      	movs	r3, #45	@ 0x2d
 80062d6:	426d      	negs	r5, r5
 80062d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062dc:	4859      	ldr	r0, [pc, #356]	@ (8006444 <_printf_i+0x238>)
 80062de:	230a      	movs	r3, #10
 80062e0:	e011      	b.n	8006306 <_printf_i+0xfa>
 80062e2:	6821      	ldr	r1, [r4, #0]
 80062e4:	6833      	ldr	r3, [r6, #0]
 80062e6:	0608      	lsls	r0, r1, #24
 80062e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80062ec:	d402      	bmi.n	80062f4 <_printf_i+0xe8>
 80062ee:	0649      	lsls	r1, r1, #25
 80062f0:	bf48      	it	mi
 80062f2:	b2ad      	uxthmi	r5, r5
 80062f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062f6:	4853      	ldr	r0, [pc, #332]	@ (8006444 <_printf_i+0x238>)
 80062f8:	6033      	str	r3, [r6, #0]
 80062fa:	bf14      	ite	ne
 80062fc:	230a      	movne	r3, #10
 80062fe:	2308      	moveq	r3, #8
 8006300:	2100      	movs	r1, #0
 8006302:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006306:	6866      	ldr	r6, [r4, #4]
 8006308:	60a6      	str	r6, [r4, #8]
 800630a:	2e00      	cmp	r6, #0
 800630c:	bfa2      	ittt	ge
 800630e:	6821      	ldrge	r1, [r4, #0]
 8006310:	f021 0104 	bicge.w	r1, r1, #4
 8006314:	6021      	strge	r1, [r4, #0]
 8006316:	b90d      	cbnz	r5, 800631c <_printf_i+0x110>
 8006318:	2e00      	cmp	r6, #0
 800631a:	d04b      	beq.n	80063b4 <_printf_i+0x1a8>
 800631c:	4616      	mov	r6, r2
 800631e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006322:	fb03 5711 	mls	r7, r3, r1, r5
 8006326:	5dc7      	ldrb	r7, [r0, r7]
 8006328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800632c:	462f      	mov	r7, r5
 800632e:	42bb      	cmp	r3, r7
 8006330:	460d      	mov	r5, r1
 8006332:	d9f4      	bls.n	800631e <_printf_i+0x112>
 8006334:	2b08      	cmp	r3, #8
 8006336:	d10b      	bne.n	8006350 <_printf_i+0x144>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	07df      	lsls	r7, r3, #31
 800633c:	d508      	bpl.n	8006350 <_printf_i+0x144>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	4299      	cmp	r1, r3
 8006344:	bfde      	ittt	le
 8006346:	2330      	movle	r3, #48	@ 0x30
 8006348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800634c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006350:	1b92      	subs	r2, r2, r6
 8006352:	6122      	str	r2, [r4, #16]
 8006354:	f8cd a000 	str.w	sl, [sp]
 8006358:	464b      	mov	r3, r9
 800635a:	aa03      	add	r2, sp, #12
 800635c:	4621      	mov	r1, r4
 800635e:	4640      	mov	r0, r8
 8006360:	f7ff fee6 	bl	8006130 <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	d14a      	bne.n	80063fe <_printf_i+0x1f2>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b004      	add	sp, #16
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f043 0320 	orr.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	4833      	ldr	r0, [pc, #204]	@ (8006448 <_printf_i+0x23c>)
 800637c:	2778      	movs	r7, #120	@ 0x78
 800637e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	6831      	ldr	r1, [r6, #0]
 8006386:	061f      	lsls	r7, r3, #24
 8006388:	f851 5b04 	ldr.w	r5, [r1], #4
 800638c:	d402      	bmi.n	8006394 <_printf_i+0x188>
 800638e:	065f      	lsls	r7, r3, #25
 8006390:	bf48      	it	mi
 8006392:	b2ad      	uxthmi	r5, r5
 8006394:	6031      	str	r1, [r6, #0]
 8006396:	07d9      	lsls	r1, r3, #31
 8006398:	bf44      	itt	mi
 800639a:	f043 0320 	orrmi.w	r3, r3, #32
 800639e:	6023      	strmi	r3, [r4, #0]
 80063a0:	b11d      	cbz	r5, 80063aa <_printf_i+0x19e>
 80063a2:	2310      	movs	r3, #16
 80063a4:	e7ac      	b.n	8006300 <_printf_i+0xf4>
 80063a6:	4827      	ldr	r0, [pc, #156]	@ (8006444 <_printf_i+0x238>)
 80063a8:	e7e9      	b.n	800637e <_printf_i+0x172>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f023 0320 	bic.w	r3, r3, #32
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	e7f6      	b.n	80063a2 <_printf_i+0x196>
 80063b4:	4616      	mov	r6, r2
 80063b6:	e7bd      	b.n	8006334 <_printf_i+0x128>
 80063b8:	6833      	ldr	r3, [r6, #0]
 80063ba:	6825      	ldr	r5, [r4, #0]
 80063bc:	6961      	ldr	r1, [r4, #20]
 80063be:	1d18      	adds	r0, r3, #4
 80063c0:	6030      	str	r0, [r6, #0]
 80063c2:	062e      	lsls	r6, r5, #24
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0x1c0>
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <_printf_i+0x1c6>
 80063cc:	0668      	lsls	r0, r5, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0x1bc>
 80063d0:	8019      	strh	r1, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	4616      	mov	r6, r2
 80063d8:	e7bc      	b.n	8006354 <_printf_i+0x148>
 80063da:	6833      	ldr	r3, [r6, #0]
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	6032      	str	r2, [r6, #0]
 80063e0:	681e      	ldr	r6, [r3, #0]
 80063e2:	6862      	ldr	r2, [r4, #4]
 80063e4:	2100      	movs	r1, #0
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7f9 ff1a 	bl	8000220 <memchr>
 80063ec:	b108      	cbz	r0, 80063f2 <_printf_i+0x1e6>
 80063ee:	1b80      	subs	r0, r0, r6
 80063f0:	6060      	str	r0, [r4, #4]
 80063f2:	6863      	ldr	r3, [r4, #4]
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	2300      	movs	r3, #0
 80063f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063fc:	e7aa      	b.n	8006354 <_printf_i+0x148>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	4632      	mov	r2, r6
 8006402:	4649      	mov	r1, r9
 8006404:	4640      	mov	r0, r8
 8006406:	47d0      	blx	sl
 8006408:	3001      	adds	r0, #1
 800640a:	d0ad      	beq.n	8006368 <_printf_i+0x15c>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	079b      	lsls	r3, r3, #30
 8006410:	d413      	bmi.n	800643a <_printf_i+0x22e>
 8006412:	68e0      	ldr	r0, [r4, #12]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	4298      	cmp	r0, r3
 8006418:	bfb8      	it	lt
 800641a:	4618      	movlt	r0, r3
 800641c:	e7a6      	b.n	800636c <_printf_i+0x160>
 800641e:	2301      	movs	r3, #1
 8006420:	4632      	mov	r2, r6
 8006422:	4649      	mov	r1, r9
 8006424:	4640      	mov	r0, r8
 8006426:	47d0      	blx	sl
 8006428:	3001      	adds	r0, #1
 800642a:	d09d      	beq.n	8006368 <_printf_i+0x15c>
 800642c:	3501      	adds	r5, #1
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	9903      	ldr	r1, [sp, #12]
 8006432:	1a5b      	subs	r3, r3, r1
 8006434:	42ab      	cmp	r3, r5
 8006436:	dcf2      	bgt.n	800641e <_printf_i+0x212>
 8006438:	e7eb      	b.n	8006412 <_printf_i+0x206>
 800643a:	2500      	movs	r5, #0
 800643c:	f104 0619 	add.w	r6, r4, #25
 8006440:	e7f5      	b.n	800642e <_printf_i+0x222>
 8006442:	bf00      	nop
 8006444:	0800688d 	.word	0x0800688d
 8006448:	0800689e 	.word	0x0800689e

0800644c <__sflush_r>:
 800644c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006454:	0716      	lsls	r6, r2, #28
 8006456:	4605      	mov	r5, r0
 8006458:	460c      	mov	r4, r1
 800645a:	d454      	bmi.n	8006506 <__sflush_r+0xba>
 800645c:	684b      	ldr	r3, [r1, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc02      	bgt.n	8006468 <__sflush_r+0x1c>
 8006462:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd48      	ble.n	80064fa <__sflush_r+0xae>
 8006468:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800646a:	2e00      	cmp	r6, #0
 800646c:	d045      	beq.n	80064fa <__sflush_r+0xae>
 800646e:	2300      	movs	r3, #0
 8006470:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006474:	682f      	ldr	r7, [r5, #0]
 8006476:	6a21      	ldr	r1, [r4, #32]
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	d030      	beq.n	80064de <__sflush_r+0x92>
 800647c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	0759      	lsls	r1, r3, #29
 8006482:	d505      	bpl.n	8006490 <__sflush_r+0x44>
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800648a:	b10b      	cbz	r3, 8006490 <__sflush_r+0x44>
 800648c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006494:	6a21      	ldr	r1, [r4, #32]
 8006496:	4628      	mov	r0, r5
 8006498:	47b0      	blx	r6
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	d106      	bne.n	80064ae <__sflush_r+0x62>
 80064a0:	6829      	ldr	r1, [r5, #0]
 80064a2:	291d      	cmp	r1, #29
 80064a4:	d82b      	bhi.n	80064fe <__sflush_r+0xb2>
 80064a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006550 <__sflush_r+0x104>)
 80064a8:	410a      	asrs	r2, r1
 80064aa:	07d6      	lsls	r6, r2, #31
 80064ac:	d427      	bmi.n	80064fe <__sflush_r+0xb2>
 80064ae:	2200      	movs	r2, #0
 80064b0:	6062      	str	r2, [r4, #4]
 80064b2:	04d9      	lsls	r1, r3, #19
 80064b4:	6922      	ldr	r2, [r4, #16]
 80064b6:	6022      	str	r2, [r4, #0]
 80064b8:	d504      	bpl.n	80064c4 <__sflush_r+0x78>
 80064ba:	1c42      	adds	r2, r0, #1
 80064bc:	d101      	bne.n	80064c2 <__sflush_r+0x76>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	b903      	cbnz	r3, 80064c4 <__sflush_r+0x78>
 80064c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80064c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064c6:	602f      	str	r7, [r5, #0]
 80064c8:	b1b9      	cbz	r1, 80064fa <__sflush_r+0xae>
 80064ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064ce:	4299      	cmp	r1, r3
 80064d0:	d002      	beq.n	80064d8 <__sflush_r+0x8c>
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff fbf2 	bl	8005cbc <_free_r>
 80064d8:	2300      	movs	r3, #0
 80064da:	6363      	str	r3, [r4, #52]	@ 0x34
 80064dc:	e00d      	b.n	80064fa <__sflush_r+0xae>
 80064de:	2301      	movs	r3, #1
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b0      	blx	r6
 80064e4:	4602      	mov	r2, r0
 80064e6:	1c50      	adds	r0, r2, #1
 80064e8:	d1c9      	bne.n	800647e <__sflush_r+0x32>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0c6      	beq.n	800647e <__sflush_r+0x32>
 80064f0:	2b1d      	cmp	r3, #29
 80064f2:	d001      	beq.n	80064f8 <__sflush_r+0xac>
 80064f4:	2b16      	cmp	r3, #22
 80064f6:	d11e      	bne.n	8006536 <__sflush_r+0xea>
 80064f8:	602f      	str	r7, [r5, #0]
 80064fa:	2000      	movs	r0, #0
 80064fc:	e022      	b.n	8006544 <__sflush_r+0xf8>
 80064fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006502:	b21b      	sxth	r3, r3
 8006504:	e01b      	b.n	800653e <__sflush_r+0xf2>
 8006506:	690f      	ldr	r7, [r1, #16]
 8006508:	2f00      	cmp	r7, #0
 800650a:	d0f6      	beq.n	80064fa <__sflush_r+0xae>
 800650c:	0793      	lsls	r3, r2, #30
 800650e:	680e      	ldr	r6, [r1, #0]
 8006510:	bf08      	it	eq
 8006512:	694b      	ldreq	r3, [r1, #20]
 8006514:	600f      	str	r7, [r1, #0]
 8006516:	bf18      	it	ne
 8006518:	2300      	movne	r3, #0
 800651a:	eba6 0807 	sub.w	r8, r6, r7
 800651e:	608b      	str	r3, [r1, #8]
 8006520:	f1b8 0f00 	cmp.w	r8, #0
 8006524:	dde9      	ble.n	80064fa <__sflush_r+0xae>
 8006526:	6a21      	ldr	r1, [r4, #32]
 8006528:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800652a:	4643      	mov	r3, r8
 800652c:	463a      	mov	r2, r7
 800652e:	4628      	mov	r0, r5
 8006530:	47b0      	blx	r6
 8006532:	2800      	cmp	r0, #0
 8006534:	dc08      	bgt.n	8006548 <__sflush_r+0xfc>
 8006536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	4407      	add	r7, r0
 800654a:	eba8 0800 	sub.w	r8, r8, r0
 800654e:	e7e7      	b.n	8006520 <__sflush_r+0xd4>
 8006550:	dfbffffe 	.word	0xdfbffffe

08006554 <_fflush_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b913      	cbnz	r3, 8006564 <_fflush_r+0x10>
 800655e:	2500      	movs	r5, #0
 8006560:	4628      	mov	r0, r5
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	b118      	cbz	r0, 800656e <_fflush_r+0x1a>
 8006566:	6a03      	ldr	r3, [r0, #32]
 8006568:	b90b      	cbnz	r3, 800656e <_fflush_r+0x1a>
 800656a:	f7ff fa9f 	bl	8005aac <__sinit>
 800656e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f3      	beq.n	800655e <_fflush_r+0xa>
 8006576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006578:	07d0      	lsls	r0, r2, #31
 800657a:	d404      	bmi.n	8006586 <_fflush_r+0x32>
 800657c:	0599      	lsls	r1, r3, #22
 800657e:	d402      	bmi.n	8006586 <_fflush_r+0x32>
 8006580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006582:	f7ff fb98 	bl	8005cb6 <__retarget_lock_acquire_recursive>
 8006586:	4628      	mov	r0, r5
 8006588:	4621      	mov	r1, r4
 800658a:	f7ff ff5f 	bl	800644c <__sflush_r>
 800658e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006590:	07da      	lsls	r2, r3, #31
 8006592:	4605      	mov	r5, r0
 8006594:	d4e4      	bmi.n	8006560 <_fflush_r+0xc>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d4e1      	bmi.n	8006560 <_fflush_r+0xc>
 800659c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800659e:	f7ff fb8b 	bl	8005cb8 <__retarget_lock_release_recursive>
 80065a2:	e7dd      	b.n	8006560 <_fflush_r+0xc>

080065a4 <__swbuf_r>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	460e      	mov	r6, r1
 80065a8:	4614      	mov	r4, r2
 80065aa:	4605      	mov	r5, r0
 80065ac:	b118      	cbz	r0, 80065b6 <__swbuf_r+0x12>
 80065ae:	6a03      	ldr	r3, [r0, #32]
 80065b0:	b90b      	cbnz	r3, 80065b6 <__swbuf_r+0x12>
 80065b2:	f7ff fa7b 	bl	8005aac <__sinit>
 80065b6:	69a3      	ldr	r3, [r4, #24]
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	071a      	lsls	r2, r3, #28
 80065be:	d501      	bpl.n	80065c4 <__swbuf_r+0x20>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	b943      	cbnz	r3, 80065d6 <__swbuf_r+0x32>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f82a 	bl	8006620 <__swsetup_r>
 80065cc:	b118      	cbz	r0, 80065d6 <__swbuf_r+0x32>
 80065ce:	f04f 37ff 	mov.w	r7, #4294967295
 80065d2:	4638      	mov	r0, r7
 80065d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	1a98      	subs	r0, r3, r2
 80065dc:	6963      	ldr	r3, [r4, #20]
 80065de:	b2f6      	uxtb	r6, r6
 80065e0:	4283      	cmp	r3, r0
 80065e2:	4637      	mov	r7, r6
 80065e4:	dc05      	bgt.n	80065f2 <__swbuf_r+0x4e>
 80065e6:	4621      	mov	r1, r4
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff ffb3 	bl	8006554 <_fflush_r>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d1ed      	bne.n	80065ce <__swbuf_r+0x2a>
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60a3      	str	r3, [r4, #8]
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	701e      	strb	r6, [r3, #0]
 8006600:	6962      	ldr	r2, [r4, #20]
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	429a      	cmp	r2, r3
 8006606:	d004      	beq.n	8006612 <__swbuf_r+0x6e>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	07db      	lsls	r3, r3, #31
 800660c:	d5e1      	bpl.n	80065d2 <__swbuf_r+0x2e>
 800660e:	2e0a      	cmp	r6, #10
 8006610:	d1df      	bne.n	80065d2 <__swbuf_r+0x2e>
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f7ff ff9d 	bl	8006554 <_fflush_r>
 800661a:	2800      	cmp	r0, #0
 800661c:	d0d9      	beq.n	80065d2 <__swbuf_r+0x2e>
 800661e:	e7d6      	b.n	80065ce <__swbuf_r+0x2a>

08006620 <__swsetup_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <__swsetup_r+0xa8>)
 8006624:	4605      	mov	r5, r0
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	460c      	mov	r4, r1
 800662a:	b118      	cbz	r0, 8006634 <__swsetup_r+0x14>
 800662c:	6a03      	ldr	r3, [r0, #32]
 800662e:	b90b      	cbnz	r3, 8006634 <__swsetup_r+0x14>
 8006630:	f7ff fa3c 	bl	8005aac <__sinit>
 8006634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006638:	0719      	lsls	r1, r3, #28
 800663a:	d422      	bmi.n	8006682 <__swsetup_r+0x62>
 800663c:	06da      	lsls	r2, r3, #27
 800663e:	d407      	bmi.n	8006650 <__swsetup_r+0x30>
 8006640:	2209      	movs	r2, #9
 8006642:	602a      	str	r2, [r5, #0]
 8006644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	e033      	b.n	80066b8 <__swsetup_r+0x98>
 8006650:	0758      	lsls	r0, r3, #29
 8006652:	d512      	bpl.n	800667a <__swsetup_r+0x5a>
 8006654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006656:	b141      	cbz	r1, 800666a <__swsetup_r+0x4a>
 8006658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800665c:	4299      	cmp	r1, r3
 800665e:	d002      	beq.n	8006666 <__swsetup_r+0x46>
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff fb2b 	bl	8005cbc <_free_r>
 8006666:	2300      	movs	r3, #0
 8006668:	6363      	str	r3, [r4, #52]	@ 0x34
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	2300      	movs	r3, #0
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0308 	orr.w	r3, r3, #8
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	b94b      	cbnz	r3, 800669a <__swsetup_r+0x7a>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800668c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006690:	d003      	beq.n	800669a <__swsetup_r+0x7a>
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f000 f84f 	bl	8006738 <__smakebuf_r>
 800669a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669e:	f013 0201 	ands.w	r2, r3, #1
 80066a2:	d00a      	beq.n	80066ba <__swsetup_r+0x9a>
 80066a4:	2200      	movs	r2, #0
 80066a6:	60a2      	str	r2, [r4, #8]
 80066a8:	6962      	ldr	r2, [r4, #20]
 80066aa:	4252      	negs	r2, r2
 80066ac:	61a2      	str	r2, [r4, #24]
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	b942      	cbnz	r2, 80066c4 <__swsetup_r+0xa4>
 80066b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066b6:	d1c5      	bne.n	8006644 <__swsetup_r+0x24>
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	0799      	lsls	r1, r3, #30
 80066bc:	bf58      	it	pl
 80066be:	6962      	ldrpl	r2, [r4, #20]
 80066c0:	60a2      	str	r2, [r4, #8]
 80066c2:	e7f4      	b.n	80066ae <__swsetup_r+0x8e>
 80066c4:	2000      	movs	r0, #0
 80066c6:	e7f7      	b.n	80066b8 <__swsetup_r+0x98>
 80066c8:	20000018 	.word	0x20000018

080066cc <_sbrk_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_sbrk_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa fd9a 	bl	8001210 <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_sbrk_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_sbrk_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	2000032c 	.word	0x2000032c

080066ec <__swhatbuf_r>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	460c      	mov	r4, r1
 80066f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f4:	2900      	cmp	r1, #0
 80066f6:	b096      	sub	sp, #88	@ 0x58
 80066f8:	4615      	mov	r5, r2
 80066fa:	461e      	mov	r6, r3
 80066fc:	da0d      	bge.n	800671a <__swhatbuf_r+0x2e>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	bf14      	ite	ne
 800670a:	2340      	movne	r3, #64	@ 0x40
 800670c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006710:	2000      	movs	r0, #0
 8006712:	6031      	str	r1, [r6, #0]
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	b016      	add	sp, #88	@ 0x58
 8006718:	bd70      	pop	{r4, r5, r6, pc}
 800671a:	466a      	mov	r2, sp
 800671c:	f000 f848 	bl	80067b0 <_fstat_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	dbec      	blt.n	80066fe <__swhatbuf_r+0x12>
 8006724:	9901      	ldr	r1, [sp, #4]
 8006726:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800672a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800672e:	4259      	negs	r1, r3
 8006730:	4159      	adcs	r1, r3
 8006732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006736:	e7eb      	b.n	8006710 <__swhatbuf_r+0x24>

08006738 <__smakebuf_r>:
 8006738:	898b      	ldrh	r3, [r1, #12]
 800673a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800673c:	079d      	lsls	r5, r3, #30
 800673e:	4606      	mov	r6, r0
 8006740:	460c      	mov	r4, r1
 8006742:	d507      	bpl.n	8006754 <__smakebuf_r+0x1c>
 8006744:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	6123      	str	r3, [r4, #16]
 800674c:	2301      	movs	r3, #1
 800674e:	6163      	str	r3, [r4, #20]
 8006750:	b003      	add	sp, #12
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006754:	ab01      	add	r3, sp, #4
 8006756:	466a      	mov	r2, sp
 8006758:	f7ff ffc8 	bl	80066ec <__swhatbuf_r>
 800675c:	9f00      	ldr	r7, [sp, #0]
 800675e:	4605      	mov	r5, r0
 8006760:	4639      	mov	r1, r7
 8006762:	4630      	mov	r0, r6
 8006764:	f7ff fb16 	bl	8005d94 <_malloc_r>
 8006768:	b948      	cbnz	r0, 800677e <__smakebuf_r+0x46>
 800676a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676e:	059a      	lsls	r2, r3, #22
 8006770:	d4ee      	bmi.n	8006750 <__smakebuf_r+0x18>
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	f043 0302 	orr.w	r3, r3, #2
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	e7e2      	b.n	8006744 <__smakebuf_r+0xc>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	6020      	str	r0, [r4, #0]
 8006782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	9b01      	ldr	r3, [sp, #4]
 800678a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800678e:	b15b      	cbz	r3, 80067a8 <__smakebuf_r+0x70>
 8006790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f81d 	bl	80067d4 <_isatty_r>
 800679a:	b128      	cbz	r0, 80067a8 <__smakebuf_r+0x70>
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	81a3      	strh	r3, [r4, #12]
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	431d      	orrs	r5, r3
 80067ac:	81a5      	strh	r5, [r4, #12]
 80067ae:	e7cf      	b.n	8006750 <__smakebuf_r+0x18>

080067b0 <_fstat_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4d07      	ldr	r5, [pc, #28]	@ (80067d0 <_fstat_r+0x20>)
 80067b4:	2300      	movs	r3, #0
 80067b6:	4604      	mov	r4, r0
 80067b8:	4608      	mov	r0, r1
 80067ba:	4611      	mov	r1, r2
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	f7fa fcfe 	bl	80011be <_fstat>
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d102      	bne.n	80067cc <_fstat_r+0x1c>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	b103      	cbz	r3, 80067cc <_fstat_r+0x1c>
 80067ca:	6023      	str	r3, [r4, #0]
 80067cc:	bd38      	pop	{r3, r4, r5, pc}
 80067ce:	bf00      	nop
 80067d0:	2000032c 	.word	0x2000032c

080067d4 <_isatty_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d06      	ldr	r5, [pc, #24]	@ (80067f0 <_isatty_r+0x1c>)
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	602b      	str	r3, [r5, #0]
 80067e0:	f7fa fcfd 	bl	80011de <_isatty>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_isatty_r+0x1a>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_isatty_r+0x1a>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	2000032c 	.word	0x2000032c

080067f4 <_init>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr

08006800 <_fini>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr
